
SmartHomeProject_EmbeddedSystems.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000243a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000110  00800060  0000243a  000024ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800170  00800170  000025de  2**0
                  ALLOC
  3 .stab         000026c4  00000000  00000000  000025e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001677  00000000  00000000  00004ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000631b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000064bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000066ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00008ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00009e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b014  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000b4ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000be38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 2e 11 	jmp	0x225c	; 0x225c <__vector_10>
      2c:	0c 94 01 11 	jmp	0x2202	; 0x2202 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e3       	ldi	r30, 0x3A	; 58
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 37       	cpi	r26, 0x72	; 114
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 96 11 	call	0x232c	; 0x232c <main>
      8a:	0c 94 1b 12 	jmp	0x2436	; 0x2436 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9f 11 	jmp	0x233e	; 0x233e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 bb 11 	jmp	0x2376	; 0x2376 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ab 11 	jmp	0x2356	; 0x2356 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ab 11 	jmp	0x2356	; 0x2356 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9f 11 	jmp	0x233e	; 0x233e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 bb 11 	jmp	0x2376	; 0x2376 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a7 11 	jmp	0x234e	; 0x234e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 c3 11 	jmp	0x2386	; 0x2386 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ab 11 	jmp	0x2356	; 0x2356 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ab 11 	jmp	0x2356	; 0x2356 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ab 11 	jmp	0x2356	; 0x2356 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 af 11 	jmp	0x235e	; 0x235e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 a7 11 	jmp	0x234e	; 0x234e <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 c3 11 	jmp	0x2386	; 0x2386 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_Init>:
#include "ADC_REG.h"
#include "ADC_CFG.h"
#include "ADC.h"

void ADC_Init(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	ADMUX = ADMUX_ENABLE_MSK;
     e36:	e7 e2       	ldi	r30, 0x27	; 39
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 e4       	ldi	r24, 0x40	; 64
     e3c:	80 83       	st	Z, r24
	ADCSRA = ADCSRA_ENABLE_MSK;
     e3e:	e6 e2       	ldi	r30, 0x26	; 38
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	87 ed       	ldi	r24, 0xD7	; 215
     e44:	80 83       	st	Z, r24
}
     e46:	cf 91       	pop	r28
     e48:	df 91       	pop	r29
     e4a:	08 95       	ret

00000e4c <ADC_GetResult>:

u16 ADC_GetResult(u8 ADC_Channel) {
     e4c:	df 93       	push	r29
     e4e:	cf 93       	push	r28
     e50:	0f 92       	push	r0
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
     e56:	89 83       	std	Y+1, r24	; 0x01

	ADC_Channel &= ADC_CHANNEL_CLEAR_MSK;
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	87 70       	andi	r24, 0x07	; 7
     e5c:	89 83       	std	Y+1, r24	; 0x01

	ADMUX &= ADMUX_CLEAR_MSK;
     e5e:	a7 e2       	ldi	r26, 0x27	; 39
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e7 e2       	ldi	r30, 0x27	; 39
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	80 7e       	andi	r24, 0xE0	; 224
     e6a:	8c 93       	st	X, r24
	/* choose the correct channel by setting the channel number in MUX4:0 bits */
	ADMUX |= ADC_Channel;
     e6c:	a7 e2       	ldi	r26, 0x27	; 39
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	e7 e2       	ldi	r30, 0x27	; 39
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	90 81       	ld	r25, Z
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	89 2b       	or	r24, r25
     e7a:	8c 93       	st	X, r24

	ADCSRA |= START_CONVERSION_MSK;
     e7c:	a6 e2       	ldi	r26, 0x26	; 38
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e6 e2       	ldi	r30, 0x26	; 38
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	80 64       	ori	r24, 0x40	; 64
     e88:	8c 93       	st	X, r24

	/* wait for conversion to complete ADIF becomes '1' */
	while(GET_BIT(ADCSRA, 4) == LOW);
     e8a:	e6 e2       	ldi	r30, 0x26	; 38
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	88 2f       	mov	r24, r24
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	80 71       	andi	r24, 0x10	; 16
     e96:	90 70       	andi	r25, 0x00	; 0
     e98:	95 95       	asr	r25
     e9a:	87 95       	ror	r24
     e9c:	95 95       	asr	r25
     e9e:	87 95       	ror	r24
     ea0:	95 95       	asr	r25
     ea2:	87 95       	ror	r24
     ea4:	95 95       	asr	r25
     ea6:	87 95       	ror	r24
     ea8:	00 97       	sbiw	r24, 0x00	; 0
     eaa:	79 f3       	breq	.-34     	; 0xe8a <ADC_GetResult+0x3e>

	ADCSRA |= ADIF_CLEAR_MSK;
     eac:	a6 e2       	ldi	r26, 0x26	; 38
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	e6 e2       	ldi	r30, 0x26	; 38
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	80 61       	ori	r24, 0x10	; 16
     eb8:	8c 93       	st	X, r24
	return ADC;/* return the data register */
     eba:	e4 e2       	ldi	r30, 0x24	; 36
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	91 81       	ldd	r25, Z+1	; 0x01
}
     ec2:	0f 90       	pop	r0
     ec4:	cf 91       	pop	r28
     ec6:	df 91       	pop	r29
     ec8:	08 95       	ret

00000eca <BUZZER_Initialize>:
 */
#include "DIO.h"
#include "BUZZER.h"

void BUZZER_Initialize()
{
     eca:	df 93       	push	r29
     ecc:	cf 93       	push	r28
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetDDR(BUZZER, 	HIGH);
     ed2:	84 e1       	ldi	r24, 0x14	; 20
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_voidSetDDR>
}
     eda:	cf 91       	pop	r28
     edc:	df 91       	pop	r29
     ede:	08 95       	ret

00000ee0 <BUZZER_ON>:

void BUZZER_ON()
{
     ee0:	df 93       	push	r29
     ee2:	cf 93       	push	r28
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPin(BUZZER, HIGH);
     ee8:	84 e1       	ldi	r24, 0x14	; 20
     eea:	61 e0       	ldi	r22, 0x01	; 1
     eec:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_voidSetPin>
}
     ef0:	cf 91       	pop	r28
     ef2:	df 91       	pop	r29
     ef4:	08 95       	ret

00000ef6 <BUZZER_OFF>:

void BUZZER_OFF()
{
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPin(BUZZER, LOW);
     efe:	84 e1       	ldi	r24, 0x14	; 20
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_voidSetPin>
}
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	08 95       	ret

00000f0c <DC_MOTOR_Initialize>:
 */
#include "DIO.h"
#include "DC_MOTOR.h"

void DC_MOTOR_Initialize()
{
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetDDR(DC_MOTOR, HIGH); //Set DDR Output
     f14:	87 e0       	ldi	r24, 0x07	; 7
     f16:	61 e0       	ldi	r22, 0x01	; 1
     f18:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_voidSetDDR>
}
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	08 95       	ret

00000f22 <DC_MOTOR_ON>:

void DC_MOTOR_ON()
{
     f22:	df 93       	push	r29
     f24:	cf 93       	push	r28
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62

	DIO_voidSetPin(DC_MOTOR, HIGH);
     f2a:	87 e0       	ldi	r24, 0x07	; 7
     f2c:	61 e0       	ldi	r22, 0x01	; 1
     f2e:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_voidSetPin>
}
     f32:	cf 91       	pop	r28
     f34:	df 91       	pop	r29
     f36:	08 95       	ret

00000f38 <DC_MOTOR_OFF>:

void DC_MOTOR_OFF()
{
     f38:	df 93       	push	r29
     f3a:	cf 93       	push	r28
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPin(DC_MOTOR, LOW);
     f40:	87 e0       	ldi	r24, 0x07	; 7
     f42:	60 e0       	ldi	r22, 0x00	; 0
     f44:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_voidSetPin>
}
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <DIO_voidSetDDR>:
#include "DIO_REG.h"
#include "DIO.h"
#define PORTS_RANGE 8

void DIO_voidSetDDR(H_PINS pinIndex, u8 directionStatus)
{
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	00 d0       	rcall	.+0      	; 0xf54 <DIO_voidSetDDR+0x6>
     f54:	00 d0       	rcall	.+0      	; 0xf56 <DIO_voidSetDDR+0x8>
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	89 83       	std	Y+1, r24	; 0x01
     f5c:	6a 83       	std	Y+2, r22	; 0x02
	switch(pinIndex)
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	3c 83       	std	Y+4, r19	; 0x04
     f66:	2b 83       	std	Y+3, r18	; 0x03
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
     f6a:	9c 81       	ldd	r25, Y+4	; 0x04
     f6c:	80 31       	cpi	r24, 0x10	; 16
     f6e:	91 05       	cpc	r25, r1
     f70:	64 f4       	brge	.+24     	; 0xf8a <DIO_voidSetDDR+0x3c>
     f72:	2b 81       	ldd	r18, Y+3	; 0x03
     f74:	3c 81       	ldd	r19, Y+4	; 0x04
     f76:	28 30       	cpi	r18, 0x08	; 8
     f78:	31 05       	cpc	r19, r1
     f7a:	0c f0       	brlt	.+2      	; 0xf7e <DIO_voidSetDDR+0x30>
     f7c:	43 c0       	rjmp	.+134    	; 0x1004 <DIO_voidSetDDR+0xb6>
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	9c 81       	ldd	r25, Y+4	; 0x04
     f82:	99 23       	and	r25, r25
     f84:	0c f4       	brge	.+2      	; 0xf88 <DIO_voidSetDDR+0x3a>
     f86:	de c0       	rjmp	.+444    	; 0x1144 <DIO_voidSetDDR+0x1f6>
     f88:	0d c0       	rjmp	.+26     	; 0xfa4 <DIO_voidSetDDR+0x56>
     f8a:	2b 81       	ldd	r18, Y+3	; 0x03
     f8c:	3c 81       	ldd	r19, Y+4	; 0x04
     f8e:	28 31       	cpi	r18, 0x18	; 24
     f90:	31 05       	cpc	r19, r1
     f92:	0c f4       	brge	.+2      	; 0xf96 <DIO_voidSetDDR+0x48>
     f94:	6d c0       	rjmp	.+218    	; 0x1070 <DIO_voidSetDDR+0x122>
     f96:	8b 81       	ldd	r24, Y+3	; 0x03
     f98:	9c 81       	ldd	r25, Y+4	; 0x04
     f9a:	80 32       	cpi	r24, 0x20	; 32
     f9c:	91 05       	cpc	r25, r1
     f9e:	0c f0       	brlt	.+2      	; 0xfa2 <DIO_voidSetDDR+0x54>
     fa0:	d1 c0       	rjmp	.+418    	; 0x1144 <DIO_voidSetDDR+0x1f6>
     fa2:	9c c0       	rjmp	.+312    	; 0x10dc <DIO_voidSetDDR+0x18e>
	{
		//Don't use pinVal directly cause we need it at statements cause we need it at specific conditions
		case 0 ... 7: if(directionStatus == HIGH)
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	81 30       	cpi	r24, 0x01	; 1
     fa8:	a1 f4       	brne	.+40     	; 0xfd2 <DIO_voidSetDDR+0x84>
					  {
					      SET_BIT(DDRD, pinIndex);
     faa:	a1 e3       	ldi	r26, 0x31	; 49
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e1 e3       	ldi	r30, 0x31	; 49
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	48 2f       	mov	r20, r24
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	02 2e       	mov	r0, r18
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <DIO_voidSetDDR+0x7a>
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	0a 94       	dec	r0
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <DIO_voidSetDDR+0x76>
     fcc:	84 2b       	or	r24, r20
     fce:	8c 93       	st	X, r24
     fd0:	b9 c0       	rjmp	.+370    	; 0x1144 <DIO_voidSetDDR+0x1f6>
					  }
					  else if(directionStatus == LOW)
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	88 23       	and	r24, r24
     fd6:	09 f0       	breq	.+2      	; 0xfda <DIO_voidSetDDR+0x8c>
     fd8:	b5 c0       	rjmp	.+362    	; 0x1144 <DIO_voidSetDDR+0x1f6>
					  {
						  CLEAR_BIT(DDRD, pinIndex);
     fda:	a1 e3       	ldi	r26, 0x31	; 49
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e1 e3       	ldi	r30, 0x31	; 49
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	48 2f       	mov	r20, r24
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	02 2e       	mov	r0, r18
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <DIO_voidSetDDR+0xaa>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	0a 94       	dec	r0
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <DIO_voidSetDDR+0xa6>
     ffc:	80 95       	com	r24
     ffe:	84 23       	and	r24, r20
    1000:	8c 93       	st	X, r24
    1002:	a0 c0       	rjmp	.+320    	; 0x1144 <DIO_voidSetDDR+0x1f6>
					  {
						  //Error on LCD
					  }
					  break;

		case 8 ... 15: if(directionStatus == HIGH)
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	81 30       	cpi	r24, 0x01	; 1
    1008:	b9 f4       	brne	.+46     	; 0x1038 <DIO_voidSetDDR+0xea>
					   {
					      SET_BIT(DDRC, (pinIndex-PORTS_RANGE));
    100a:	a4 e3       	ldi	r26, 0x34	; 52
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e4 e3       	ldi	r30, 0x34	; 52
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	48 2f       	mov	r20, r24
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	88 2f       	mov	r24, r24
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	9c 01       	movw	r18, r24
    101e:	28 50       	subi	r18, 0x08	; 8
    1020:	30 40       	sbci	r19, 0x00	; 0
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	02 2e       	mov	r0, r18
    1028:	02 c0       	rjmp	.+4      	; 0x102e <DIO_voidSetDDR+0xe0>
    102a:	88 0f       	add	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	0a 94       	dec	r0
    1030:	e2 f7       	brpl	.-8      	; 0x102a <DIO_voidSetDDR+0xdc>
    1032:	84 2b       	or	r24, r20
    1034:	8c 93       	st	X, r24
    1036:	86 c0       	rjmp	.+268    	; 0x1144 <DIO_voidSetDDR+0x1f6>
					   }
					   else if(directionStatus == LOW)
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	88 23       	and	r24, r24
    103c:	09 f0       	breq	.+2      	; 0x1040 <DIO_voidSetDDR+0xf2>
    103e:	82 c0       	rjmp	.+260    	; 0x1144 <DIO_voidSetDDR+0x1f6>
					   {
						  CLEAR_BIT(DDRC, (pinIndex-PORTS_RANGE));
    1040:	a4 e3       	ldi	r26, 0x34	; 52
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e4 e3       	ldi	r30, 0x34	; 52
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	48 2f       	mov	r20, r24
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	88 2f       	mov	r24, r24
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	9c 01       	movw	r18, r24
    1054:	28 50       	subi	r18, 0x08	; 8
    1056:	30 40       	sbci	r19, 0x00	; 0
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	02 2e       	mov	r0, r18
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <DIO_voidSetDDR+0x116>
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	0a 94       	dec	r0
    1066:	e2 f7       	brpl	.-8      	; 0x1060 <DIO_voidSetDDR+0x112>
    1068:	80 95       	com	r24
    106a:	84 23       	and	r24, r20
    106c:	8c 93       	st	X, r24
    106e:	6a c0       	rjmp	.+212    	; 0x1144 <DIO_voidSetDDR+0x1f6>
					   {
						  //Error on LCD
					   }
					   break;

		case 16 ... 23: if(directionStatus == HIGH)
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	81 30       	cpi	r24, 0x01	; 1
    1074:	b9 f4       	brne	.+46     	; 0x10a4 <DIO_voidSetDDR+0x156>
					    {
						  SET_BIT(DDRB, (pinIndex-(2*PORTS_RANGE)));
    1076:	a7 e3       	ldi	r26, 0x37	; 55
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e7 e3       	ldi	r30, 0x37	; 55
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	48 2f       	mov	r20, r24
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	88 2f       	mov	r24, r24
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	9c 01       	movw	r18, r24
    108a:	20 51       	subi	r18, 0x10	; 16
    108c:	30 40       	sbci	r19, 0x00	; 0
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	02 2e       	mov	r0, r18
    1094:	02 c0       	rjmp	.+4      	; 0x109a <DIO_voidSetDDR+0x14c>
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	0a 94       	dec	r0
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <DIO_voidSetDDR+0x148>
    109e:	84 2b       	or	r24, r20
    10a0:	8c 93       	st	X, r24
    10a2:	50 c0       	rjmp	.+160    	; 0x1144 <DIO_voidSetDDR+0x1f6>
					    }
					    else if(directionStatus == LOW)
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	88 23       	and	r24, r24
    10a8:	09 f0       	breq	.+2      	; 0x10ac <DIO_voidSetDDR+0x15e>
    10aa:	4c c0       	rjmp	.+152    	; 0x1144 <DIO_voidSetDDR+0x1f6>
					    {
					      CLEAR_BIT(DDRB, (pinIndex-(2*PORTS_RANGE)));
    10ac:	a7 e3       	ldi	r26, 0x37	; 55
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e7 e3       	ldi	r30, 0x37	; 55
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	48 2f       	mov	r20, r24
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	88 2f       	mov	r24, r24
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	9c 01       	movw	r18, r24
    10c0:	20 51       	subi	r18, 0x10	; 16
    10c2:	30 40       	sbci	r19, 0x00	; 0
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	02 2e       	mov	r0, r18
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <DIO_voidSetDDR+0x182>
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	0a 94       	dec	r0
    10d2:	e2 f7       	brpl	.-8      	; 0x10cc <DIO_voidSetDDR+0x17e>
    10d4:	80 95       	com	r24
    10d6:	84 23       	and	r24, r20
    10d8:	8c 93       	st	X, r24
    10da:	34 c0       	rjmp	.+104    	; 0x1144 <DIO_voidSetDDR+0x1f6>
					    {
						  //Error on LCD
					    }
						break;

		case 24 ... 31: if(directionStatus == HIGH)
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	81 30       	cpi	r24, 0x01	; 1
    10e0:	b9 f4       	brne	.+46     	; 0x1110 <DIO_voidSetDDR+0x1c2>
					    {
					      SET_BIT(DDRA, (pinIndex-(3*PORTS_RANGE)));
    10e2:	aa e3       	ldi	r26, 0x3A	; 58
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	ea e3       	ldi	r30, 0x3A	; 58
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	48 2f       	mov	r20, r24
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	88 2f       	mov	r24, r24
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	9c 01       	movw	r18, r24
    10f6:	28 51       	subi	r18, 0x18	; 24
    10f8:	30 40       	sbci	r19, 0x00	; 0
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 2e       	mov	r0, r18
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <DIO_voidSetDDR+0x1b8>
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	0a 94       	dec	r0
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <DIO_voidSetDDR+0x1b4>
    110a:	84 2b       	or	r24, r20
    110c:	8c 93       	st	X, r24
    110e:	1a c0       	rjmp	.+52     	; 0x1144 <DIO_voidSetDDR+0x1f6>
					    }
					    else if(directionStatus == LOW)
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	88 23       	and	r24, r24
    1114:	b9 f4       	brne	.+46     	; 0x1144 <DIO_voidSetDDR+0x1f6>
					    {
					      CLEAR_BIT(DDRA, (pinIndex-(3*PORTS_RANGE)));
    1116:	aa e3       	ldi	r26, 0x3A	; 58
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	ea e3       	ldi	r30, 0x3A	; 58
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	48 2f       	mov	r20, r24
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	88 2f       	mov	r24, r24
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	9c 01       	movw	r18, r24
    112a:	28 51       	subi	r18, 0x18	; 24
    112c:	30 40       	sbci	r19, 0x00	; 0
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	02 2e       	mov	r0, r18
    1134:	02 c0       	rjmp	.+4      	; 0x113a <DIO_voidSetDDR+0x1ec>
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	0a 94       	dec	r0
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <DIO_voidSetDDR+0x1e8>
    113e:	80 95       	com	r24
    1140:	84 23       	and	r24, r20
    1142:	8c 93       	st	X, r24
					    {
						  //Error on LCD
					    }
						break;
		}
}
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	0f 90       	pop	r0
    114a:	0f 90       	pop	r0
    114c:	cf 91       	pop	r28
    114e:	df 91       	pop	r29
    1150:	08 95       	ret

00001152 <DIO_voidSetPort>:

void DIO_voidSetPort(H_PORTS port, u8 portVal)
{
    1152:	df 93       	push	r29
    1154:	cf 93       	push	r28
    1156:	00 d0       	rcall	.+0      	; 0x1158 <DIO_voidSetPort+0x6>
    1158:	00 d0       	rcall	.+0      	; 0x115a <DIO_voidSetPort+0x8>
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62
    115e:	89 83       	std	Y+1, r24	; 0x01
    1160:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	3c 83       	std	Y+4, r19	; 0x04
    116a:	2b 83       	std	Y+3, r18	; 0x03
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	81 30       	cpi	r24, 0x01	; 1
    1172:	91 05       	cpc	r25, r1
    1174:	d1 f0       	breq	.+52     	; 0x11aa <DIO_voidSetPort+0x58>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	2c f4       	brge	.+10     	; 0x118a <DIO_voidSetPort+0x38>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	00 97       	sbiw	r24, 0x00	; 0
    1186:	61 f0       	breq	.+24     	; 0x11a0 <DIO_voidSetPort+0x4e>
    1188:	1e c0       	rjmp	.+60     	; 0x11c6 <DIO_voidSetPort+0x74>
    118a:	2b 81       	ldd	r18, Y+3	; 0x03
    118c:	3c 81       	ldd	r19, Y+4	; 0x04
    118e:	22 30       	cpi	r18, 0x02	; 2
    1190:	31 05       	cpc	r19, r1
    1192:	81 f0       	breq	.+32     	; 0x11b4 <DIO_voidSetPort+0x62>
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	9c 81       	ldd	r25, Y+4	; 0x04
    1198:	83 30       	cpi	r24, 0x03	; 3
    119a:	91 05       	cpc	r25, r1
    119c:	81 f0       	breq	.+32     	; 0x11be <DIO_voidSetPort+0x6c>
    119e:	13 c0       	rjmp	.+38     	; 0x11c6 <DIO_voidSetPort+0x74>
	{
		case H_PORTA: PORTA = portVal;
    11a0:	eb e3       	ldi	r30, 0x3B	; 59
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	80 83       	st	Z, r24
    11a8:	0e c0       	rjmp	.+28     	; 0x11c6 <DIO_voidSetPort+0x74>
					 break;

		case H_PORTB: PORTB = portVal;
    11aa:	e8 e3       	ldi	r30, 0x38	; 56
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	80 83       	st	Z, r24
    11b2:	09 c0       	rjmp	.+18     	; 0x11c6 <DIO_voidSetPort+0x74>
					 break;

		case H_PORTC: PORTC = portVal;
    11b4:	e5 e3       	ldi	r30, 0x35	; 53
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	80 83       	st	Z, r24
    11bc:	04 c0       	rjmp	.+8      	; 0x11c6 <DIO_voidSetPort+0x74>
					 break;

		case H_PORTD: PORTD = portVal;
    11be:	e2 e3       	ldi	r30, 0x32	; 50
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	80 83       	st	Z, r24
					 break;
	}
}
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	cf 91       	pop	r28
    11d0:	df 91       	pop	r29
    11d2:	08 95       	ret

000011d4 <DIO_voidSetPin>:

void DIO_voidSetPin(H_PINS pinIndex, u8 pinVal)
{
    11d4:	df 93       	push	r29
    11d6:	cf 93       	push	r28
    11d8:	00 d0       	rcall	.+0      	; 0x11da <DIO_voidSetPin+0x6>
    11da:	00 d0       	rcall	.+0      	; 0x11dc <DIO_voidSetPin+0x8>
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
    11e0:	89 83       	std	Y+1, r24	; 0x01
    11e2:	6a 83       	std	Y+2, r22	; 0x02
	switch(pinIndex)
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	3c 83       	std	Y+4, r19	; 0x04
    11ec:	2b 83       	std	Y+3, r18	; 0x03
    11ee:	8b 81       	ldd	r24, Y+3	; 0x03
    11f0:	9c 81       	ldd	r25, Y+4	; 0x04
    11f2:	80 31       	cpi	r24, 0x10	; 16
    11f4:	91 05       	cpc	r25, r1
    11f6:	64 f4       	brge	.+24     	; 0x1210 <DIO_voidSetPin+0x3c>
    11f8:	2b 81       	ldd	r18, Y+3	; 0x03
    11fa:	3c 81       	ldd	r19, Y+4	; 0x04
    11fc:	28 30       	cpi	r18, 0x08	; 8
    11fe:	31 05       	cpc	r19, r1
    1200:	0c f0       	brlt	.+2      	; 0x1204 <DIO_voidSetPin+0x30>
    1202:	43 c0       	rjmp	.+134    	; 0x128a <DIO_voidSetPin+0xb6>
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	9c 81       	ldd	r25, Y+4	; 0x04
    1208:	99 23       	and	r25, r25
    120a:	0c f4       	brge	.+2      	; 0x120e <DIO_voidSetPin+0x3a>
    120c:	de c0       	rjmp	.+444    	; 0x13ca <DIO_voidSetPin+0x1f6>
    120e:	0d c0       	rjmp	.+26     	; 0x122a <DIO_voidSetPin+0x56>
    1210:	2b 81       	ldd	r18, Y+3	; 0x03
    1212:	3c 81       	ldd	r19, Y+4	; 0x04
    1214:	28 31       	cpi	r18, 0x18	; 24
    1216:	31 05       	cpc	r19, r1
    1218:	0c f4       	brge	.+2      	; 0x121c <DIO_voidSetPin+0x48>
    121a:	6d c0       	rjmp	.+218    	; 0x12f6 <DIO_voidSetPin+0x122>
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	9c 81       	ldd	r25, Y+4	; 0x04
    1220:	80 32       	cpi	r24, 0x20	; 32
    1222:	91 05       	cpc	r25, r1
    1224:	0c f0       	brlt	.+2      	; 0x1228 <DIO_voidSetPin+0x54>
    1226:	d1 c0       	rjmp	.+418    	; 0x13ca <DIO_voidSetPin+0x1f6>
    1228:	9c c0       	rjmp	.+312    	; 0x1362 <DIO_voidSetPin+0x18e>
	{
		//Don't use pinVal directly cause we need it at statements cause we need it at specific conditions
		case 0 ... 7: if(pinVal == HIGH)
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	81 30       	cpi	r24, 0x01	; 1
    122e:	a1 f4       	brne	.+40     	; 0x1258 <DIO_voidSetPin+0x84>
					  {
					      SET_BIT(PORTD, pinIndex);
    1230:	a2 e3       	ldi	r26, 0x32	; 50
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	e2 e3       	ldi	r30, 0x32	; 50
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	48 2f       	mov	r20, r24
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	02 2e       	mov	r0, r18
    1248:	02 c0       	rjmp	.+4      	; 0x124e <DIO_voidSetPin+0x7a>
    124a:	88 0f       	add	r24, r24
    124c:	99 1f       	adc	r25, r25
    124e:	0a 94       	dec	r0
    1250:	e2 f7       	brpl	.-8      	; 0x124a <DIO_voidSetPin+0x76>
    1252:	84 2b       	or	r24, r20
    1254:	8c 93       	st	X, r24
    1256:	b9 c0       	rjmp	.+370    	; 0x13ca <DIO_voidSetPin+0x1f6>
					  }
					  else if(pinVal == LOW)
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	88 23       	and	r24, r24
    125c:	09 f0       	breq	.+2      	; 0x1260 <DIO_voidSetPin+0x8c>
    125e:	b5 c0       	rjmp	.+362    	; 0x13ca <DIO_voidSetPin+0x1f6>
					  {
						  CLEAR_BIT(PORTD, pinIndex);
    1260:	a2 e3       	ldi	r26, 0x32	; 50
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	e2 e3       	ldi	r30, 0x32	; 50
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	48 2f       	mov	r20, r24
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	02 2e       	mov	r0, r18
    1278:	02 c0       	rjmp	.+4      	; 0x127e <DIO_voidSetPin+0xaa>
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	0a 94       	dec	r0
    1280:	e2 f7       	brpl	.-8      	; 0x127a <DIO_voidSetPin+0xa6>
    1282:	80 95       	com	r24
    1284:	84 23       	and	r24, r20
    1286:	8c 93       	st	X, r24
    1288:	a0 c0       	rjmp	.+320    	; 0x13ca <DIO_voidSetPin+0x1f6>
					  {
						  //Error on LCD
					  }
					  break;

		case 8 ... 15: if(pinVal == HIGH)
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	81 30       	cpi	r24, 0x01	; 1
    128e:	b9 f4       	brne	.+46     	; 0x12be <DIO_voidSetPin+0xea>
					   {
					      SET_BIT(PORTC, (pinIndex-PORTS_RANGE));
    1290:	a5 e3       	ldi	r26, 0x35	; 53
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	e5 e3       	ldi	r30, 0x35	; 53
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	48 2f       	mov	r20, r24
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	88 2f       	mov	r24, r24
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	9c 01       	movw	r18, r24
    12a4:	28 50       	subi	r18, 0x08	; 8
    12a6:	30 40       	sbci	r19, 0x00	; 0
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	02 2e       	mov	r0, r18
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <DIO_voidSetPin+0xe0>
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	0a 94       	dec	r0
    12b6:	e2 f7       	brpl	.-8      	; 0x12b0 <DIO_voidSetPin+0xdc>
    12b8:	84 2b       	or	r24, r20
    12ba:	8c 93       	st	X, r24
    12bc:	86 c0       	rjmp	.+268    	; 0x13ca <DIO_voidSetPin+0x1f6>
					   }
					   else if(pinVal == LOW)
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	88 23       	and	r24, r24
    12c2:	09 f0       	breq	.+2      	; 0x12c6 <DIO_voidSetPin+0xf2>
    12c4:	82 c0       	rjmp	.+260    	; 0x13ca <DIO_voidSetPin+0x1f6>
					   {
						  CLEAR_BIT(PORTC, (pinIndex-PORTS_RANGE));
    12c6:	a5 e3       	ldi	r26, 0x35	; 53
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e5 e3       	ldi	r30, 0x35	; 53
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	48 2f       	mov	r20, r24
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	88 2f       	mov	r24, r24
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	9c 01       	movw	r18, r24
    12da:	28 50       	subi	r18, 0x08	; 8
    12dc:	30 40       	sbci	r19, 0x00	; 0
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	02 2e       	mov	r0, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <DIO_voidSetPin+0x116>
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	0a 94       	dec	r0
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <DIO_voidSetPin+0x112>
    12ee:	80 95       	com	r24
    12f0:	84 23       	and	r24, r20
    12f2:	8c 93       	st	X, r24
    12f4:	6a c0       	rjmp	.+212    	; 0x13ca <DIO_voidSetPin+0x1f6>
					   {
						  //Error on LCD
					   }
					   break;

		case 16 ... 23: if(pinVal == HIGH)
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	81 30       	cpi	r24, 0x01	; 1
    12fa:	b9 f4       	brne	.+46     	; 0x132a <DIO_voidSetPin+0x156>
					    {
						  SET_BIT(PORTB, (pinIndex-(2*PORTS_RANGE)));
    12fc:	a8 e3       	ldi	r26, 0x38	; 56
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e8 e3       	ldi	r30, 0x38	; 56
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	48 2f       	mov	r20, r24
    1308:	89 81       	ldd	r24, Y+1	; 0x01
    130a:	88 2f       	mov	r24, r24
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	9c 01       	movw	r18, r24
    1310:	20 51       	subi	r18, 0x10	; 16
    1312:	30 40       	sbci	r19, 0x00	; 0
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	02 2e       	mov	r0, r18
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <DIO_voidSetPin+0x14c>
    131c:	88 0f       	add	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	0a 94       	dec	r0
    1322:	e2 f7       	brpl	.-8      	; 0x131c <DIO_voidSetPin+0x148>
    1324:	84 2b       	or	r24, r20
    1326:	8c 93       	st	X, r24
    1328:	50 c0       	rjmp	.+160    	; 0x13ca <DIO_voidSetPin+0x1f6>
					    }
					    else if(pinVal == LOW)
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	88 23       	and	r24, r24
    132e:	09 f0       	breq	.+2      	; 0x1332 <DIO_voidSetPin+0x15e>
    1330:	4c c0       	rjmp	.+152    	; 0x13ca <DIO_voidSetPin+0x1f6>
					    {
					      CLEAR_BIT(PORTB, (pinIndex-(2*PORTS_RANGE)));
    1332:	a8 e3       	ldi	r26, 0x38	; 56
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	e8 e3       	ldi	r30, 0x38	; 56
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	48 2f       	mov	r20, r24
    133e:	89 81       	ldd	r24, Y+1	; 0x01
    1340:	88 2f       	mov	r24, r24
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	9c 01       	movw	r18, r24
    1346:	20 51       	subi	r18, 0x10	; 16
    1348:	30 40       	sbci	r19, 0x00	; 0
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	02 2e       	mov	r0, r18
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <DIO_voidSetPin+0x182>
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	0a 94       	dec	r0
    1358:	e2 f7       	brpl	.-8      	; 0x1352 <DIO_voidSetPin+0x17e>
    135a:	80 95       	com	r24
    135c:	84 23       	and	r24, r20
    135e:	8c 93       	st	X, r24
    1360:	34 c0       	rjmp	.+104    	; 0x13ca <DIO_voidSetPin+0x1f6>
					    {
						  //Error on LCD
					    }
						break;

		case 24 ... 31: if(pinVal == HIGH)
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	81 30       	cpi	r24, 0x01	; 1
    1366:	b9 f4       	brne	.+46     	; 0x1396 <DIO_voidSetPin+0x1c2>
					    {
					      SET_BIT(PORTA, (pinIndex-(3*PORTS_RANGE)));
    1368:	ab e3       	ldi	r26, 0x3B	; 59
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	eb e3       	ldi	r30, 0x3B	; 59
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	48 2f       	mov	r20, r24
    1374:	89 81       	ldd	r24, Y+1	; 0x01
    1376:	88 2f       	mov	r24, r24
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	9c 01       	movw	r18, r24
    137c:	28 51       	subi	r18, 0x18	; 24
    137e:	30 40       	sbci	r19, 0x00	; 0
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	02 2e       	mov	r0, r18
    1386:	02 c0       	rjmp	.+4      	; 0x138c <DIO_voidSetPin+0x1b8>
    1388:	88 0f       	add	r24, r24
    138a:	99 1f       	adc	r25, r25
    138c:	0a 94       	dec	r0
    138e:	e2 f7       	brpl	.-8      	; 0x1388 <DIO_voidSetPin+0x1b4>
    1390:	84 2b       	or	r24, r20
    1392:	8c 93       	st	X, r24
    1394:	1a c0       	rjmp	.+52     	; 0x13ca <DIO_voidSetPin+0x1f6>
					    }
					    else if(pinVal == LOW)
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	88 23       	and	r24, r24
    139a:	b9 f4       	brne	.+46     	; 0x13ca <DIO_voidSetPin+0x1f6>
					    {
					      CLEAR_BIT(PORTA, (pinIndex-(3*PORTS_RANGE)));
    139c:	ab e3       	ldi	r26, 0x3B	; 59
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	eb e3       	ldi	r30, 0x3B	; 59
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	48 2f       	mov	r20, r24
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	88 2f       	mov	r24, r24
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	9c 01       	movw	r18, r24
    13b0:	28 51       	subi	r18, 0x18	; 24
    13b2:	30 40       	sbci	r19, 0x00	; 0
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	02 2e       	mov	r0, r18
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <DIO_voidSetPin+0x1ec>
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	0a 94       	dec	r0
    13c2:	e2 f7       	brpl	.-8      	; 0x13bc <DIO_voidSetPin+0x1e8>
    13c4:	80 95       	com	r24
    13c6:	84 23       	and	r24, r20
    13c8:	8c 93       	st	X, r24
					    {
						  //Error on LCD
					    }
						break;
		}
}
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	cf 91       	pop	r28
    13d4:	df 91       	pop	r29
    13d6:	08 95       	ret

000013d8 <DIO_getPortVal>:

u8 DIO_getPortVal(H_PORTS port)
{
    13d8:	df 93       	push	r29
    13da:	cf 93       	push	r28
    13dc:	00 d0       	rcall	.+0      	; 0x13de <DIO_getPortVal+0x6>
    13de:	00 d0       	rcall	.+0      	; 0x13e0 <DIO_getPortVal+0x8>
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    13e4:	8a 83       	std	Y+2, r24	; 0x02
	u8 pinVal = 0;
    13e6:	19 82       	std	Y+1, r1	; 0x01
	switch(port)
    13e8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	3c 83       	std	Y+4, r19	; 0x04
    13f0:	2b 83       	std	Y+3, r18	; 0x03
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	9c 81       	ldd	r25, Y+4	; 0x04
    13f6:	81 30       	cpi	r24, 0x01	; 1
    13f8:	91 05       	cpc	r25, r1
    13fa:	d1 f0       	breq	.+52     	; 0x1430 <DIO_getPortVal+0x58>
    13fc:	2b 81       	ldd	r18, Y+3	; 0x03
    13fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1400:	22 30       	cpi	r18, 0x02	; 2
    1402:	31 05       	cpc	r19, r1
    1404:	2c f4       	brge	.+10     	; 0x1410 <DIO_getPortVal+0x38>
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	9c 81       	ldd	r25, Y+4	; 0x04
    140a:	00 97       	sbiw	r24, 0x00	; 0
    140c:	61 f0       	breq	.+24     	; 0x1426 <DIO_getPortVal+0x4e>
    140e:	1e c0       	rjmp	.+60     	; 0x144c <DIO_getPortVal+0x74>
    1410:	2b 81       	ldd	r18, Y+3	; 0x03
    1412:	3c 81       	ldd	r19, Y+4	; 0x04
    1414:	22 30       	cpi	r18, 0x02	; 2
    1416:	31 05       	cpc	r19, r1
    1418:	81 f0       	breq	.+32     	; 0x143a <DIO_getPortVal+0x62>
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	9c 81       	ldd	r25, Y+4	; 0x04
    141e:	83 30       	cpi	r24, 0x03	; 3
    1420:	91 05       	cpc	r25, r1
    1422:	81 f0       	breq	.+32     	; 0x1444 <DIO_getPortVal+0x6c>
    1424:	13 c0       	rjmp	.+38     	; 0x144c <DIO_getPortVal+0x74>
	{
		case H_PORTA: pinVal = PINA;
    1426:	e9 e3       	ldi	r30, 0x39	; 57
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	89 83       	std	Y+1, r24	; 0x01
    142e:	0e c0       	rjmp	.+28     	; 0x144c <DIO_getPortVal+0x74>
					  break;

		case H_PORTB: pinVal = PINB;
    1430:	e6 e3       	ldi	r30, 0x36	; 54
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	89 83       	std	Y+1, r24	; 0x01
    1438:	09 c0       	rjmp	.+18     	; 0x144c <DIO_getPortVal+0x74>
					  break;

		case H_PORTC: pinVal = PINC;
    143a:	e3 e3       	ldi	r30, 0x33	; 51
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	89 83       	std	Y+1, r24	; 0x01
    1442:	04 c0       	rjmp	.+8      	; 0x144c <DIO_getPortVal+0x74>
					  break;

		case H_PORTD: pinVal = PIND;
    1444:	e0 e3       	ldi	r30, 0x30	; 48
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	89 83       	std	Y+1, r24	; 0x01
					  break;
	}
	return pinVal;
    144c:	89 81       	ldd	r24, Y+1	; 0x01
}
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	cf 91       	pop	r28
    1458:	df 91       	pop	r29
    145a:	08 95       	ret

0000145c <DIO_getPinVal>:

u8 DIO_getPinVal(H_PINS pinIndex)
{
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	00 d0       	rcall	.+0      	; 0x1462 <DIO_getPinVal+0x6>
    1462:	00 d0       	rcall	.+0      	; 0x1464 <DIO_getPinVal+0x8>
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
    1468:	8a 83       	std	Y+2, r24	; 0x02
    u8 pinVal = 0;
    146a:	19 82       	std	Y+1, r1	; 0x01
    switch(pinIndex)
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	3c 83       	std	Y+4, r19	; 0x04
    1474:	2b 83       	std	Y+3, r18	; 0x03
    1476:	4b 81       	ldd	r20, Y+3	; 0x03
    1478:	5c 81       	ldd	r21, Y+4	; 0x04
    147a:	40 31       	cpi	r20, 0x10	; 16
    147c:	51 05       	cpc	r21, r1
    147e:	5c f4       	brge	.+22     	; 0x1496 <DIO_getPinVal+0x3a>
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	9c 81       	ldd	r25, Y+4	; 0x04
    1484:	88 30       	cpi	r24, 0x08	; 8
    1486:	91 05       	cpc	r25, r1
    1488:	8c f5       	brge	.+98     	; 0x14ec <DIO_getPinVal+0x90>
    148a:	2b 81       	ldd	r18, Y+3	; 0x03
    148c:	3c 81       	ldd	r19, Y+4	; 0x04
    148e:	33 23       	and	r19, r19
    1490:	0c f4       	brge	.+2      	; 0x1494 <DIO_getPinVal+0x38>
    1492:	91 c0       	rjmp	.+290    	; 0x15b6 <DIO_getPinVal+0x15a>
    1494:	0d c0       	rjmp	.+26     	; 0x14b0 <DIO_getPinVal+0x54>
    1496:	4b 81       	ldd	r20, Y+3	; 0x03
    1498:	5c 81       	ldd	r21, Y+4	; 0x04
    149a:	48 31       	cpi	r20, 0x18	; 24
    149c:	51 05       	cpc	r21, r1
    149e:	0c f4       	brge	.+2      	; 0x14a2 <DIO_getPinVal+0x46>
    14a0:	47 c0       	rjmp	.+142    	; 0x1530 <DIO_getPinVal+0xd4>
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	9c 81       	ldd	r25, Y+4	; 0x04
    14a6:	80 32       	cpi	r24, 0x20	; 32
    14a8:	91 05       	cpc	r25, r1
    14aa:	0c f0       	brlt	.+2      	; 0x14ae <DIO_getPinVal+0x52>
    14ac:	84 c0       	rjmp	.+264    	; 0x15b6 <DIO_getPinVal+0x15a>
    14ae:	62 c0       	rjmp	.+196    	; 0x1574 <DIO_getPinVal+0x118>
	{
    	case 0 ... 7: pinVal = GET_BIT(PIND, pinIndex);
    14b0:	e0 e3       	ldi	r30, 0x30	; 48
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	48 2f       	mov	r20, r24
    14b8:	50 e0       	ldi	r21, 0x00	; 0
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <DIO_getPinVal+0x6e>
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	2a 95       	dec	r18
    14cc:	e2 f7       	brpl	.-8      	; 0x14c6 <DIO_getPinVal+0x6a>
    14ce:	9a 01       	movw	r18, r20
    14d0:	28 23       	and	r18, r24
    14d2:	39 23       	and	r19, r25
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	88 2f       	mov	r24, r24
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	a9 01       	movw	r20, r18
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <DIO_getPinVal+0x86>
    14de:	55 95       	asr	r21
    14e0:	47 95       	ror	r20
    14e2:	8a 95       	dec	r24
    14e4:	e2 f7       	brpl	.-8      	; 0x14de <DIO_getPinVal+0x82>
    14e6:	ca 01       	movw	r24, r20
    14e8:	89 83       	std	Y+1, r24	; 0x01
    14ea:	65 c0       	rjmp	.+202    	; 0x15b6 <DIO_getPinVal+0x15a>
    				  break;

    	case 8 ... 15: pinVal = GET_BIT(PINC, (pinIndex-PORTS_RANGE));
    14ec:	e3 e3       	ldi	r30, 0x33	; 51
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	48 2f       	mov	r20, r24
    14f4:	50 e0       	ldi	r21, 0x00	; 0
    14f6:	8a 81       	ldd	r24, Y+2	; 0x02
    14f8:	88 2f       	mov	r24, r24
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	9c 01       	movw	r18, r24
    14fe:	28 50       	subi	r18, 0x08	; 8
    1500:	30 40       	sbci	r19, 0x00	; 0
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	02 c0       	rjmp	.+4      	; 0x150c <DIO_getPinVal+0xb0>
    1508:	88 0f       	add	r24, r24
    150a:	99 1f       	adc	r25, r25
    150c:	2a 95       	dec	r18
    150e:	e2 f7       	brpl	.-8      	; 0x1508 <DIO_getPinVal+0xac>
    1510:	9a 01       	movw	r18, r20
    1512:	28 23       	and	r18, r24
    1514:	39 23       	and	r19, r25
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	88 2f       	mov	r24, r24
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	08 97       	sbiw	r24, 0x08	; 8
    151e:	a9 01       	movw	r20, r18
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <DIO_getPinVal+0xca>
    1522:	55 95       	asr	r21
    1524:	47 95       	ror	r20
    1526:	8a 95       	dec	r24
    1528:	e2 f7       	brpl	.-8      	; 0x1522 <DIO_getPinVal+0xc6>
    152a:	ca 01       	movw	r24, r20
    152c:	89 83       	std	Y+1, r24	; 0x01
    152e:	43 c0       	rjmp	.+134    	; 0x15b6 <DIO_getPinVal+0x15a>
    				   break;

    	case 16 ... 23: pinVal = GET_BIT(PINB, (pinIndex-(2*PORTS_RANGE)));
    1530:	e6 e3       	ldi	r30, 0x36	; 54
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	48 2f       	mov	r20, r24
    1538:	50 e0       	ldi	r21, 0x00	; 0
    153a:	8a 81       	ldd	r24, Y+2	; 0x02
    153c:	88 2f       	mov	r24, r24
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	9c 01       	movw	r18, r24
    1542:	20 51       	subi	r18, 0x10	; 16
    1544:	30 40       	sbci	r19, 0x00	; 0
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <DIO_getPinVal+0xf4>
    154c:	88 0f       	add	r24, r24
    154e:	99 1f       	adc	r25, r25
    1550:	2a 95       	dec	r18
    1552:	e2 f7       	brpl	.-8      	; 0x154c <DIO_getPinVal+0xf0>
    1554:	9a 01       	movw	r18, r20
    1556:	28 23       	and	r18, r24
    1558:	39 23       	and	r19, r25
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	88 2f       	mov	r24, r24
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	40 97       	sbiw	r24, 0x10	; 16
    1562:	a9 01       	movw	r20, r18
    1564:	02 c0       	rjmp	.+4      	; 0x156a <DIO_getPinVal+0x10e>
    1566:	55 95       	asr	r21
    1568:	47 95       	ror	r20
    156a:	8a 95       	dec	r24
    156c:	e2 f7       	brpl	.-8      	; 0x1566 <DIO_getPinVal+0x10a>
    156e:	ca 01       	movw	r24, r20
    1570:	89 83       	std	Y+1, r24	; 0x01
    1572:	21 c0       	rjmp	.+66     	; 0x15b6 <DIO_getPinVal+0x15a>
    			  	    break;

    	case 24 ... 31: pinVal = GET_BIT(PINA, (pinIndex-(3*PORTS_RANGE)));
    1574:	e9 e3       	ldi	r30, 0x39	; 57
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	48 2f       	mov	r20, r24
    157c:	50 e0       	ldi	r21, 0x00	; 0
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	88 2f       	mov	r24, r24
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	9c 01       	movw	r18, r24
    1586:	28 51       	subi	r18, 0x18	; 24
    1588:	30 40       	sbci	r19, 0x00	; 0
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	02 c0       	rjmp	.+4      	; 0x1594 <DIO_getPinVal+0x138>
    1590:	88 0f       	add	r24, r24
    1592:	99 1f       	adc	r25, r25
    1594:	2a 95       	dec	r18
    1596:	e2 f7       	brpl	.-8      	; 0x1590 <DIO_getPinVal+0x134>
    1598:	9a 01       	movw	r18, r20
    159a:	28 23       	and	r18, r24
    159c:	39 23       	and	r19, r25
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	88 2f       	mov	r24, r24
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	48 97       	sbiw	r24, 0x18	; 24
    15a6:	a9 01       	movw	r20, r18
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <DIO_getPinVal+0x152>
    15aa:	55 95       	asr	r21
    15ac:	47 95       	ror	r20
    15ae:	8a 95       	dec	r24
    15b0:	e2 f7       	brpl	.-8      	; 0x15aa <DIO_getPinVal+0x14e>
    15b2:	ca 01       	movw	r24, r20
    15b4:	89 83       	std	Y+1, r24	; 0x01
    				    break;
	}
    return pinVal;
    15b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    15b8:	0f 90       	pop	r0
    15ba:	0f 90       	pop	r0
    15bc:	0f 90       	pop	r0
    15be:	0f 90       	pop	r0
    15c0:	cf 91       	pop	r28
    15c2:	df 91       	pop	r29
    15c4:	08 95       	ret

000015c6 <Keypad_Intialize>:
#include <stdlib.h>
#include <util/delay.h>
#include "Keypad.h"

void Keypad_Intialize()
{
    15c6:	df 93       	push	r29
    15c8:	cf 93       	push	r28
    15ca:	cd b7       	in	r28, 0x3d	; 61
    15cc:	de b7       	in	r29, 0x3e	; 62
	/*Set Keypad COLUMNS as Output to put the LOW(0) and HIGH(1) signal*/
	DIO_voidSetDDR(KEYPAD_COLUMN_0, HIGH);
    15ce:	89 e1       	ldi	r24, 0x19	; 25
    15d0:	61 e0       	ldi	r22, 0x01	; 1
    15d2:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_voidSetDDR>
	DIO_voidSetDDR(KEYPAD_COLUMN_1, HIGH);
    15d6:	8a e1       	ldi	r24, 0x1A	; 26
    15d8:	61 e0       	ldi	r22, 0x01	; 1
    15da:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_voidSetDDR>
	DIO_voidSetDDR(KEYPAD_COLUMN_2, HIGH);
    15de:	8b e1       	ldi	r24, 0x1B	; 27
    15e0:	61 e0       	ldi	r22, 0x01	; 1
    15e2:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_voidSetDDR>

	/*Set Keypad ROWS as Input to detect The LOW(0) signal*/
	DIO_voidSetDDR(KEYPAD_ROW_0, LOW);
    15e6:	8c e1       	ldi	r24, 0x1C	; 28
    15e8:	60 e0       	ldi	r22, 0x00	; 0
    15ea:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_voidSetDDR>
	DIO_voidSetDDR(KEYPAD_ROW_1, LOW);
    15ee:	8d e1       	ldi	r24, 0x1D	; 29
    15f0:	60 e0       	ldi	r22, 0x00	; 0
    15f2:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_voidSetDDR>
	DIO_voidSetDDR(KEYPAD_ROW_2, LOW);
    15f6:	8e e1       	ldi	r24, 0x1E	; 30
    15f8:	60 e0       	ldi	r22, 0x00	; 0
    15fa:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_voidSetDDR>
	DIO_voidSetDDR(KEYPAD_ROW_3, LOW);
    15fe:	8f e1       	ldi	r24, 0x1F	; 31
    1600:	60 e0       	ldi	r22, 0x00	; 0
    1602:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_voidSetDDR>

	//Enable Pull UP Resistance
	DIO_voidSetPort(H_PORTA, KEYPAD_PULL_UP_ENABLE_MSK);
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	60 ef       	ldi	r22, 0xF0	; 240
    160a:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_voidSetPort>
}
    160e:	cf 91       	pop	r28
    1610:	df 91       	pop	r29
    1612:	08 95       	ret

00001614 <Keypad_GetKeyPressed>:

s8 Keypad_GetKeyPressed()
{
    1614:	df 93       	push	r29
    1616:	cf 93       	push	r28
    1618:	cd b7       	in	r28, 0x3d	; 61
    161a:	de b7       	in	r29, 0x3e	; 62
    161c:	6d 97       	sbiw	r28, 0x1d	; 29
    161e:	0f b6       	in	r0, 0x3f	; 63
    1620:	f8 94       	cli
    1622:	de bf       	out	0x3e, r29	; 62
    1624:	0f be       	out	0x3f, r0	; 63
    1626:	cd bf       	out	0x3d, r28	; 61
	u8 columnCnt = 0;
    1628:	18 8a       	std	Y+16, r1	; 0x10
	u8 rowCnt = 0;
    162a:	1f 86       	std	Y+15, r1	; 0x0f
	for(columnCnt = KEYPAD_COLUMN_0; columnCnt <= KEYPAD_COLUMN_2; columnCnt++)
    162c:	89 e1       	ldi	r24, 0x19	; 25
    162e:	88 8b       	std	Y+16, r24	; 0x10
    1630:	e4 c0       	rjmp	.+456    	; 0x17fa <Keypad_GetKeyPressed+0x1e6>
	{
		switch(columnCnt)
    1632:	88 89       	ldd	r24, Y+16	; 0x10
    1634:	28 2f       	mov	r18, r24
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	3d 8f       	std	Y+29, r19	; 0x1d
    163a:	2c 8f       	std	Y+28, r18	; 0x1c
    163c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    163e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1640:	8a 31       	cpi	r24, 0x1A	; 26
    1642:	91 05       	cpc	r25, r1
    1644:	b9 f0       	breq	.+46     	; 0x1674 <Keypad_GetKeyPressed+0x60>
    1646:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1648:	3d 8d       	ldd	r19, Y+29	; 0x1d
    164a:	2b 31       	cpi	r18, 0x1B	; 27
    164c:	31 05       	cpc	r19, r1
    164e:	f9 f0       	breq	.+62     	; 0x168e <Keypad_GetKeyPressed+0x7a>
    1650:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1652:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1654:	89 31       	cpi	r24, 0x19	; 25
    1656:	91 05       	cpc	r25, r1
    1658:	31 f5       	brne	.+76     	; 0x16a6 <Keypad_GetKeyPressed+0x92>
		{
			case KEYPAD_COLUMN_0:
				DIO_voidSetPin(KEYPAD_COLUMN_0, LOW);
    165a:	89 e1       	ldi	r24, 0x19	; 25
    165c:	60 e0       	ldi	r22, 0x00	; 0
    165e:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_voidSetPin>
				DIO_voidSetPin(KEYPAD_COLUMN_1, HIGH);
    1662:	8a e1       	ldi	r24, 0x1A	; 26
    1664:	61 e0       	ldi	r22, 0x01	; 1
    1666:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_voidSetPin>
				DIO_voidSetPin(KEYPAD_COLUMN_2, HIGH);
    166a:	8b e1       	ldi	r24, 0x1B	; 27
    166c:	61 e0       	ldi	r22, 0x01	; 1
    166e:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_voidSetPin>
    1672:	19 c0       	rjmp	.+50     	; 0x16a6 <Keypad_GetKeyPressed+0x92>
				break;

			case KEYPAD_COLUMN_1:
				DIO_voidSetPin(KEYPAD_COLUMN_0, HIGH);
    1674:	89 e1       	ldi	r24, 0x19	; 25
    1676:	61 e0       	ldi	r22, 0x01	; 1
    1678:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_voidSetPin>
				DIO_voidSetPin(KEYPAD_COLUMN_1, LOW);
    167c:	8a e1       	ldi	r24, 0x1A	; 26
    167e:	60 e0       	ldi	r22, 0x00	; 0
    1680:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_voidSetPin>
				DIO_voidSetPin(KEYPAD_COLUMN_2, HIGH);
    1684:	8b e1       	ldi	r24, 0x1B	; 27
    1686:	61 e0       	ldi	r22, 0x01	; 1
    1688:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_voidSetPin>
    168c:	0c c0       	rjmp	.+24     	; 0x16a6 <Keypad_GetKeyPressed+0x92>
				break;

			case KEYPAD_COLUMN_2:
				DIO_voidSetPin(KEYPAD_COLUMN_0, HIGH);
    168e:	89 e1       	ldi	r24, 0x19	; 25
    1690:	61 e0       	ldi	r22, 0x01	; 1
    1692:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_voidSetPin>
				DIO_voidSetPin(KEYPAD_COLUMN_1, HIGH);
    1696:	8a e1       	ldi	r24, 0x1A	; 26
    1698:	61 e0       	ldi	r22, 0x01	; 1
    169a:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_voidSetPin>
				DIO_voidSetPin(KEYPAD_COLUMN_2, LOW);
    169e:	8b e1       	ldi	r24, 0x1B	; 27
    16a0:	60 e0       	ldi	r22, 0x00	; 0
    16a2:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_voidSetPin>
				break;
		}//end of switch

		for(rowCnt = KEYPAD_ROW_0; rowCnt <= KEYPAD_ROW_3; rowCnt++)
    16a6:	8c e1       	ldi	r24, 0x1C	; 28
    16a8:	8f 87       	std	Y+15, r24	; 0x0f
    16aa:	a0 c0       	rjmp	.+320    	; 0x17ec <Keypad_GetKeyPressed+0x1d8>
		{
			if(DIO_getPinVal(rowCnt) == LOW)
    16ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    16ae:	0e 94 2e 0a 	call	0x145c	; 0x145c <DIO_getPinVal>
    16b2:	88 23       	and	r24, r24
    16b4:	09 f0       	breq	.+2      	; 0x16b8 <Keypad_GetKeyPressed+0xa4>
    16b6:	97 c0       	rjmp	.+302    	; 0x17e6 <Keypad_GetKeyPressed+0x1d2>
			{
				switch(rowCnt)
    16b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    16ba:	28 2f       	mov	r18, r24
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	3b 8f       	std	Y+27, r19	; 0x1b
    16c0:	2a 8f       	std	Y+26, r18	; 0x1a
    16c2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16c4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    16c6:	8d 31       	cpi	r24, 0x1D	; 29
    16c8:	91 05       	cpc	r25, r1
    16ca:	a9 f1       	breq	.+106    	; 0x1736 <Keypad_GetKeyPressed+0x122>
    16cc:	2a 8d       	ldd	r18, Y+26	; 0x1a
    16ce:	3b 8d       	ldd	r19, Y+27	; 0x1b
    16d0:	2e 31       	cpi	r18, 0x1E	; 30
    16d2:	31 05       	cpc	r19, r1
    16d4:	34 f4       	brge	.+12     	; 0x16e2 <Keypad_GetKeyPressed+0xce>
    16d6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16d8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    16da:	8c 31       	cpi	r24, 0x1C	; 28
    16dc:	91 05       	cpc	r25, r1
    16de:	71 f0       	breq	.+28     	; 0x16fc <Keypad_GetKeyPressed+0xe8>
    16e0:	82 c0       	rjmp	.+260    	; 0x17e6 <Keypad_GetKeyPressed+0x1d2>
    16e2:	2a 8d       	ldd	r18, Y+26	; 0x1a
    16e4:	3b 8d       	ldd	r19, Y+27	; 0x1b
    16e6:	2e 31       	cpi	r18, 0x1E	; 30
    16e8:	31 05       	cpc	r19, r1
    16ea:	09 f4       	brne	.+2      	; 0x16ee <Keypad_GetKeyPressed+0xda>
    16ec:	42 c0       	rjmp	.+132    	; 0x1772 <Keypad_GetKeyPressed+0x15e>
    16ee:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16f0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    16f2:	8f 31       	cpi	r24, 0x1F	; 31
    16f4:	91 05       	cpc	r25, r1
    16f6:	09 f4       	brne	.+2      	; 0x16fa <Keypad_GetKeyPressed+0xe6>
    16f8:	59 c0       	rjmp	.+178    	; 0x17ac <Keypad_GetKeyPressed+0x198>
    16fa:	75 c0       	rjmp	.+234    	; 0x17e6 <Keypad_GetKeyPressed+0x1d2>
				{
					case KEYPAD_ROW_0:
						switch(columnCnt)
    16fc:	88 89       	ldd	r24, Y+16	; 0x10
    16fe:	28 2f       	mov	r18, r24
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	39 8f       	std	Y+25, r19	; 0x19
    1704:	28 8f       	std	Y+24, r18	; 0x18
    1706:	88 8d       	ldd	r24, Y+24	; 0x18
    1708:	99 8d       	ldd	r25, Y+25	; 0x19
    170a:	8a 31       	cpi	r24, 0x1A	; 26
    170c:	91 05       	cpc	r25, r1
    170e:	71 f0       	breq	.+28     	; 0x172c <Keypad_GetKeyPressed+0x118>
    1710:	28 8d       	ldd	r18, Y+24	; 0x18
    1712:	39 8d       	ldd	r19, Y+25	; 0x19
    1714:	2b 31       	cpi	r18, 0x1B	; 27
    1716:	31 05       	cpc	r19, r1
    1718:	59 f0       	breq	.+22     	; 0x1730 <Keypad_GetKeyPressed+0x11c>
    171a:	88 8d       	ldd	r24, Y+24	; 0x18
    171c:	99 8d       	ldd	r25, Y+25	; 0x19
    171e:	89 31       	cpi	r24, 0x19	; 25
    1720:	91 05       	cpc	r25, r1
    1722:	09 f0       	breq	.+2      	; 0x1726 <Keypad_GetKeyPressed+0x112>
    1724:	60 c0       	rjmp	.+192    	; 0x17e6 <Keypad_GetKeyPressed+0x1d2>
						{
							case KEYPAD_COLUMN_0: return 35; //ASCII Of #
    1726:	93 e2       	ldi	r25, 0x23	; 35
    1728:	9f 8b       	std	Y+23, r25	; 0x17
    172a:	df c0       	rjmp	.+446    	; 0x18ea <Keypad_GetKeyPressed+0x2d6>
							case KEYPAD_COLUMN_1: return 0;
    172c:	1f 8a       	std	Y+23, r1	; 0x17
    172e:	dd c0       	rjmp	.+442    	; 0x18ea <Keypad_GetKeyPressed+0x2d6>
							case KEYPAD_COLUMN_2: return 42; //ASCII Of *
    1730:	2a e2       	ldi	r18, 0x2A	; 42
    1732:	2f 8b       	std	Y+23, r18	; 0x17
    1734:	da c0       	rjmp	.+436    	; 0x18ea <Keypad_GetKeyPressed+0x2d6>
						}
						break;
					case KEYPAD_ROW_1:
						switch(columnCnt)
    1736:	88 89       	ldd	r24, Y+16	; 0x10
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	3e 8b       	std	Y+22, r19	; 0x16
    173e:	2d 8b       	std	Y+21, r18	; 0x15
    1740:	8d 89       	ldd	r24, Y+21	; 0x15
    1742:	9e 89       	ldd	r25, Y+22	; 0x16
    1744:	8a 31       	cpi	r24, 0x1A	; 26
    1746:	91 05       	cpc	r25, r1
    1748:	71 f0       	breq	.+28     	; 0x1766 <Keypad_GetKeyPressed+0x152>
    174a:	2d 89       	ldd	r18, Y+21	; 0x15
    174c:	3e 89       	ldd	r19, Y+22	; 0x16
    174e:	2b 31       	cpi	r18, 0x1B	; 27
    1750:	31 05       	cpc	r19, r1
    1752:	61 f0       	breq	.+24     	; 0x176c <Keypad_GetKeyPressed+0x158>
    1754:	8d 89       	ldd	r24, Y+21	; 0x15
    1756:	9e 89       	ldd	r25, Y+22	; 0x16
    1758:	89 31       	cpi	r24, 0x19	; 25
    175a:	91 05       	cpc	r25, r1
    175c:	09 f0       	breq	.+2      	; 0x1760 <Keypad_GetKeyPressed+0x14c>
    175e:	43 c0       	rjmp	.+134    	; 0x17e6 <Keypad_GetKeyPressed+0x1d2>
						{
							case KEYPAD_COLUMN_0: return 9;
    1760:	99 e0       	ldi	r25, 0x09	; 9
    1762:	9f 8b       	std	Y+23, r25	; 0x17
    1764:	c2 c0       	rjmp	.+388    	; 0x18ea <Keypad_GetKeyPressed+0x2d6>
							case KEYPAD_COLUMN_1: return 8;
    1766:	28 e0       	ldi	r18, 0x08	; 8
    1768:	2f 8b       	std	Y+23, r18	; 0x17
    176a:	bf c0       	rjmp	.+382    	; 0x18ea <Keypad_GetKeyPressed+0x2d6>
							case KEYPAD_COLUMN_2: return 7;
    176c:	37 e0       	ldi	r19, 0x07	; 7
    176e:	3f 8b       	std	Y+23, r19	; 0x17
    1770:	bc c0       	rjmp	.+376    	; 0x18ea <Keypad_GetKeyPressed+0x2d6>
						}
						break;
					case KEYPAD_ROW_2:
						switch(columnCnt)
    1772:	88 89       	ldd	r24, Y+16	; 0x10
    1774:	28 2f       	mov	r18, r24
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	3c 8b       	std	Y+20, r19	; 0x14
    177a:	2b 8b       	std	Y+19, r18	; 0x13
    177c:	8b 89       	ldd	r24, Y+19	; 0x13
    177e:	9c 89       	ldd	r25, Y+20	; 0x14
    1780:	8a 31       	cpi	r24, 0x1A	; 26
    1782:	91 05       	cpc	r25, r1
    1784:	69 f0       	breq	.+26     	; 0x17a0 <Keypad_GetKeyPressed+0x18c>
    1786:	2b 89       	ldd	r18, Y+19	; 0x13
    1788:	3c 89       	ldd	r19, Y+20	; 0x14
    178a:	2b 31       	cpi	r18, 0x1B	; 27
    178c:	31 05       	cpc	r19, r1
    178e:	59 f0       	breq	.+22     	; 0x17a6 <Keypad_GetKeyPressed+0x192>
    1790:	8b 89       	ldd	r24, Y+19	; 0x13
    1792:	9c 89       	ldd	r25, Y+20	; 0x14
    1794:	89 31       	cpi	r24, 0x19	; 25
    1796:	91 05       	cpc	r25, r1
    1798:	31 f5       	brne	.+76     	; 0x17e6 <Keypad_GetKeyPressed+0x1d2>
						{
							case KEYPAD_COLUMN_0: return 6;
    179a:	96 e0       	ldi	r25, 0x06	; 6
    179c:	9f 8b       	std	Y+23, r25	; 0x17
    179e:	a5 c0       	rjmp	.+330    	; 0x18ea <Keypad_GetKeyPressed+0x2d6>
							case KEYPAD_COLUMN_1: return 5;
    17a0:	25 e0       	ldi	r18, 0x05	; 5
    17a2:	2f 8b       	std	Y+23, r18	; 0x17
    17a4:	a2 c0       	rjmp	.+324    	; 0x18ea <Keypad_GetKeyPressed+0x2d6>
							case KEYPAD_COLUMN_2: return 4;
    17a6:	34 e0       	ldi	r19, 0x04	; 4
    17a8:	3f 8b       	std	Y+23, r19	; 0x17
    17aa:	9f c0       	rjmp	.+318    	; 0x18ea <Keypad_GetKeyPressed+0x2d6>
						}
						break;
					case KEYPAD_ROW_3:
						switch(columnCnt)
    17ac:	88 89       	ldd	r24, Y+16	; 0x10
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	3a 8b       	std	Y+18, r19	; 0x12
    17b4:	29 8b       	std	Y+17, r18	; 0x11
    17b6:	89 89       	ldd	r24, Y+17	; 0x11
    17b8:	9a 89       	ldd	r25, Y+18	; 0x12
    17ba:	8a 31       	cpi	r24, 0x1A	; 26
    17bc:	91 05       	cpc	r25, r1
    17be:	69 f0       	breq	.+26     	; 0x17da <Keypad_GetKeyPressed+0x1c6>
    17c0:	29 89       	ldd	r18, Y+17	; 0x11
    17c2:	3a 89       	ldd	r19, Y+18	; 0x12
    17c4:	2b 31       	cpi	r18, 0x1B	; 27
    17c6:	31 05       	cpc	r19, r1
    17c8:	59 f0       	breq	.+22     	; 0x17e0 <Keypad_GetKeyPressed+0x1cc>
    17ca:	89 89       	ldd	r24, Y+17	; 0x11
    17cc:	9a 89       	ldd	r25, Y+18	; 0x12
    17ce:	89 31       	cpi	r24, 0x19	; 25
    17d0:	91 05       	cpc	r25, r1
    17d2:	49 f4       	brne	.+18     	; 0x17e6 <Keypad_GetKeyPressed+0x1d2>
						{
							case KEYPAD_COLUMN_0: return 3;
    17d4:	93 e0       	ldi	r25, 0x03	; 3
    17d6:	9f 8b       	std	Y+23, r25	; 0x17
    17d8:	88 c0       	rjmp	.+272    	; 0x18ea <Keypad_GetKeyPressed+0x2d6>
							case KEYPAD_COLUMN_1: return 2;
    17da:	22 e0       	ldi	r18, 0x02	; 2
    17dc:	2f 8b       	std	Y+23, r18	; 0x17
    17de:	85 c0       	rjmp	.+266    	; 0x18ea <Keypad_GetKeyPressed+0x2d6>
							case KEYPAD_COLUMN_2: return 1;
    17e0:	31 e0       	ldi	r19, 0x01	; 1
    17e2:	3f 8b       	std	Y+23, r19	; 0x17
    17e4:	82 c0       	rjmp	.+260    	; 0x18ea <Keypad_GetKeyPressed+0x2d6>
				DIO_voidSetPin(KEYPAD_COLUMN_1, HIGH);
				DIO_voidSetPin(KEYPAD_COLUMN_2, LOW);
				break;
		}//end of switch

		for(rowCnt = KEYPAD_ROW_0; rowCnt <= KEYPAD_ROW_3; rowCnt++)
    17e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    17e8:	8f 5f       	subi	r24, 0xFF	; 255
    17ea:	8f 87       	std	Y+15, r24	; 0x0f
    17ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    17ee:	80 32       	cpi	r24, 0x20	; 32
    17f0:	08 f4       	brcc	.+2      	; 0x17f4 <Keypad_GetKeyPressed+0x1e0>
    17f2:	5c cf       	rjmp	.-328    	; 0x16ac <Keypad_GetKeyPressed+0x98>

s8 Keypad_GetKeyPressed()
{
	u8 columnCnt = 0;
	u8 rowCnt = 0;
	for(columnCnt = KEYPAD_COLUMN_0; columnCnt <= KEYPAD_COLUMN_2; columnCnt++)
    17f4:	88 89       	ldd	r24, Y+16	; 0x10
    17f6:	8f 5f       	subi	r24, 0xFF	; 255
    17f8:	88 8b       	std	Y+16, r24	; 0x10
    17fa:	88 89       	ldd	r24, Y+16	; 0x10
    17fc:	8c 31       	cpi	r24, 0x1C	; 28
    17fe:	08 f4       	brcc	.+2      	; 0x1802 <Keypad_GetKeyPressed+0x1ee>
    1800:	18 cf       	rjmp	.-464    	; 0x1632 <Keypad_GetKeyPressed+0x1e>
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	a8 e4       	ldi	r26, 0x48	; 72
    1808:	b3 e4       	ldi	r27, 0x43	; 67
    180a:	8b 87       	std	Y+11, r24	; 0x0b
    180c:	9c 87       	std	Y+12, r25	; 0x0c
    180e:	ad 87       	std	Y+13, r26	; 0x0d
    1810:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1812:	6b 85       	ldd	r22, Y+11	; 0x0b
    1814:	7c 85       	ldd	r23, Y+12	; 0x0c
    1816:	8d 85       	ldd	r24, Y+13	; 0x0d
    1818:	9e 85       	ldd	r25, Y+14	; 0x0e
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	4a e7       	ldi	r20, 0x7A	; 122
    1820:	55 e4       	ldi	r21, 0x45	; 69
    1822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	8f 83       	std	Y+7, r24	; 0x07
    182c:	98 87       	std	Y+8, r25	; 0x08
    182e:	a9 87       	std	Y+9, r26	; 0x09
    1830:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1832:	6f 81       	ldd	r22, Y+7	; 0x07
    1834:	78 85       	ldd	r23, Y+8	; 0x08
    1836:	89 85       	ldd	r24, Y+9	; 0x09
    1838:	9a 85       	ldd	r25, Y+10	; 0x0a
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	40 e8       	ldi	r20, 0x80	; 128
    1840:	5f e3       	ldi	r21, 0x3F	; 63
    1842:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1846:	88 23       	and	r24, r24
    1848:	2c f4       	brge	.+10     	; 0x1854 <Keypad_GetKeyPressed+0x240>
		__ticks = 1;
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	9e 83       	std	Y+6, r25	; 0x06
    1850:	8d 83       	std	Y+5, r24	; 0x05
    1852:	3f c0       	rjmp	.+126    	; 0x18d2 <Keypad_GetKeyPressed+0x2be>
	else if (__tmp > 65535)
    1854:	6f 81       	ldd	r22, Y+7	; 0x07
    1856:	78 85       	ldd	r23, Y+8	; 0x08
    1858:	89 85       	ldd	r24, Y+9	; 0x09
    185a:	9a 85       	ldd	r25, Y+10	; 0x0a
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	3f ef       	ldi	r19, 0xFF	; 255
    1860:	4f e7       	ldi	r20, 0x7F	; 127
    1862:	57 e4       	ldi	r21, 0x47	; 71
    1864:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1868:	18 16       	cp	r1, r24
    186a:	4c f5       	brge	.+82     	; 0x18be <Keypad_GetKeyPressed+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    186c:	6b 85       	ldd	r22, Y+11	; 0x0b
    186e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1870:	8d 85       	ldd	r24, Y+13	; 0x0d
    1872:	9e 85       	ldd	r25, Y+14	; 0x0e
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	40 e2       	ldi	r20, 0x20	; 32
    187a:	51 e4       	ldi	r21, 0x41	; 65
    187c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	bc 01       	movw	r22, r24
    1886:	cd 01       	movw	r24, r26
    1888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	9e 83       	std	Y+6, r25	; 0x06
    1892:	8d 83       	std	Y+5, r24	; 0x05
    1894:	0f c0       	rjmp	.+30     	; 0x18b4 <Keypad_GetKeyPressed+0x2a0>
    1896:	80 e9       	ldi	r24, 0x90	; 144
    1898:	91 e0       	ldi	r25, 0x01	; 1
    189a:	9c 83       	std	Y+4, r25	; 0x04
    189c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    189e:	8b 81       	ldd	r24, Y+3	; 0x03
    18a0:	9c 81       	ldd	r25, Y+4	; 0x04
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	f1 f7       	brne	.-4      	; 0x18a2 <Keypad_GetKeyPressed+0x28e>
    18a6:	9c 83       	std	Y+4, r25	; 0x04
    18a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18aa:	8d 81       	ldd	r24, Y+5	; 0x05
    18ac:	9e 81       	ldd	r25, Y+6	; 0x06
    18ae:	01 97       	sbiw	r24, 0x01	; 1
    18b0:	9e 83       	std	Y+6, r25	; 0x06
    18b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b4:	8d 81       	ldd	r24, Y+5	; 0x05
    18b6:	9e 81       	ldd	r25, Y+6	; 0x06
    18b8:	00 97       	sbiw	r24, 0x00	; 0
    18ba:	69 f7       	brne	.-38     	; 0x1896 <Keypad_GetKeyPressed+0x282>
    18bc:	14 c0       	rjmp	.+40     	; 0x18e6 <Keypad_GetKeyPressed+0x2d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18be:	6f 81       	ldd	r22, Y+7	; 0x07
    18c0:	78 85       	ldd	r23, Y+8	; 0x08
    18c2:	89 85       	ldd	r24, Y+9	; 0x09
    18c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	9e 83       	std	Y+6, r25	; 0x06
    18d0:	8d 83       	std	Y+5, r24	; 0x05
    18d2:	8d 81       	ldd	r24, Y+5	; 0x05
    18d4:	9e 81       	ldd	r25, Y+6	; 0x06
    18d6:	9a 83       	std	Y+2, r25	; 0x02
    18d8:	89 83       	std	Y+1, r24	; 0x01
    18da:	89 81       	ldd	r24, Y+1	; 0x01
    18dc:	9a 81       	ldd	r25, Y+2	; 0x02
    18de:	01 97       	sbiw	r24, 0x01	; 1
    18e0:	f1 f7       	brne	.-4      	; 0x18de <Keypad_GetKeyPressed+0x2ca>
    18e2:	9a 83       	std	Y+2, r25	; 0x02
    18e4:	89 83       	std	Y+1, r24	; 0x01

			}//end of if statement
		}//end of second for loop
	}//end of 1st for loop
	_delay_ms(200); //delay to not repeat
	return -1; //No Key Pressed
    18e6:	8f ef       	ldi	r24, 0xFF	; 255
    18e8:	8f 8b       	std	Y+23, r24	; 0x17
    18ea:	8f 89       	ldd	r24, Y+23	; 0x17
}
    18ec:	6d 96       	adiw	r28, 0x1d	; 29
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	f8 94       	cli
    18f2:	de bf       	out	0x3e, r29	; 62
    18f4:	0f be       	out	0x3f, r0	; 63
    18f6:	cd bf       	out	0x3d, r28	; 61
    18f8:	cf 91       	pop	r28
    18fa:	df 91       	pop	r29
    18fc:	08 95       	ret

000018fe <Keypad_GetKeyPressedStr>:

void Keypad_GetKeyPressedStr(char *strPtr)
{
    18fe:	df 93       	push	r29
    1900:	cf 93       	push	r28
    1902:	00 d0       	rcall	.+0      	; 0x1904 <Keypad_GetKeyPressedStr+0x6>
    1904:	cd b7       	in	r28, 0x3d	; 61
    1906:	de b7       	in	r29, 0x3e	; 62
    1908:	9a 83       	std	Y+2, r25	; 0x02
    190a:	89 83       	std	Y+1, r24	; 0x01
	if(Keypad_GetKeyPressed() > -1)
    190c:	0e 94 0a 0b 	call	0x1614	; 0x1614 <Keypad_GetKeyPressed>
    1910:	88 23       	and	r24, r24
    1912:	64 f0       	brlt	.+24     	; 0x192c <Keypad_GetKeyPressedStr+0x2e>
	{
		itoa(Keypad_GetKeyPressed(), strPtr, 10);
    1914:	0e 94 0a 0b 	call	0x1614	; 0x1614 <Keypad_GetKeyPressed>
    1918:	99 27       	eor	r25, r25
    191a:	87 fd       	sbrc	r24, 7
    191c:	90 95       	com	r25
    191e:	29 81       	ldd	r18, Y+1	; 0x01
    1920:	3a 81       	ldd	r19, Y+2	; 0x02
    1922:	b9 01       	movw	r22, r18
    1924:	4a e0       	ldi	r20, 0x0A	; 10
    1926:	50 e0       	ldi	r21, 0x00	; 0
    1928:	0e 94 d6 11 	call	0x23ac	; 0x23ac <itoa>
	}
}
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	cf 91       	pop	r28
    1932:	df 91       	pop	r29
    1934:	08 95       	ret

00001936 <LCD_WritePin>:
 * RW -> READ = 1/ WRITE = 0
 * A/K Additional resist control strength of illumination
 * */

static void LCD_WritePin(u8 data)
{
    1936:	df 93       	push	r29
    1938:	cf 93       	push	r28
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62
    193e:	6d 97       	sbiw	r28, 0x1d	; 29
    1940:	0f b6       	in	r0, 0x3f	; 63
    1942:	f8 94       	cli
    1944:	de bf       	out	0x3e, r29	; 62
    1946:	0f be       	out	0x3f, r0	; 63
    1948:	cd bf       	out	0x3d, r28	; 61
    194a:	8d 8f       	std	Y+29, r24	; 0x1d
		DIO_voidSetPin(LCD_D6, GET_BIT(data, 6));
		DIO_voidSetPin(LCD_D7, GET_BIT(data, 7));

	#elif (LCD_MODE_PIN == LCD_MODE_4)
		//in mode 4 we need to send data on 2 pulses
		DIO_voidSetPin(LCD_D4, GET_BIT(data, 4));
    194c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    194e:	88 2f       	mov	r24, r24
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	80 71       	andi	r24, 0x10	; 16
    1954:	90 70       	andi	r25, 0x00	; 0
    1956:	95 95       	asr	r25
    1958:	87 95       	ror	r24
    195a:	95 95       	asr	r25
    195c:	87 95       	ror	r24
    195e:	95 95       	asr	r25
    1960:	87 95       	ror	r24
    1962:	95 95       	asr	r25
    1964:	87 95       	ror	r24
    1966:	98 2f       	mov	r25, r24
    1968:	8e e0       	ldi	r24, 0x0E	; 14
    196a:	69 2f       	mov	r22, r25
    196c:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_voidSetPin>
		DIO_voidSetPin(LCD_D5, GET_BIT(data, 5));
    1970:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1972:	88 2f       	mov	r24, r24
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	80 72       	andi	r24, 0x20	; 32
    1978:	90 70       	andi	r25, 0x00	; 0
    197a:	95 95       	asr	r25
    197c:	87 95       	ror	r24
    197e:	95 95       	asr	r25
    1980:	87 95       	ror	r24
    1982:	95 95       	asr	r25
    1984:	87 95       	ror	r24
    1986:	95 95       	asr	r25
    1988:	87 95       	ror	r24
    198a:	95 95       	asr	r25
    198c:	87 95       	ror	r24
    198e:	98 2f       	mov	r25, r24
    1990:	8d e0       	ldi	r24, 0x0D	; 13
    1992:	69 2f       	mov	r22, r25
    1994:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_voidSetPin>
		DIO_voidSetPin(LCD_D6, GET_BIT(data, 6));
    1998:	8d 8d       	ldd	r24, Y+29	; 0x1d
    199a:	88 2f       	mov	r24, r24
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	80 74       	andi	r24, 0x40	; 64
    19a0:	90 70       	andi	r25, 0x00	; 0
    19a2:	08 2e       	mov	r0, r24
    19a4:	89 2f       	mov	r24, r25
    19a6:	00 0c       	add	r0, r0
    19a8:	88 1f       	adc	r24, r24
    19aa:	99 0b       	sbc	r25, r25
    19ac:	00 0c       	add	r0, r0
    19ae:	88 1f       	adc	r24, r24
    19b0:	99 1f       	adc	r25, r25
    19b2:	98 2f       	mov	r25, r24
    19b4:	8c e0       	ldi	r24, 0x0C	; 12
    19b6:	69 2f       	mov	r22, r25
    19b8:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_voidSetPin>
		DIO_voidSetPin(LCD_D7, GET_BIT(data, 7));
    19bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19be:	98 2f       	mov	r25, r24
    19c0:	99 1f       	adc	r25, r25
    19c2:	99 27       	eor	r25, r25
    19c4:	99 1f       	adc	r25, r25
    19c6:	8b e0       	ldi	r24, 0x0B	; 11
    19c8:	69 2f       	mov	r22, r25
    19ca:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_voidSetPin>

		/*First Pulse*/
		DIO_voidSetPin(LCD_E, HIGH);
    19ce:	88 e0       	ldi	r24, 0x08	; 8
    19d0:	61 e0       	ldi	r22, 0x01	; 1
    19d2:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_voidSetPin>
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	a0 e8       	ldi	r26, 0x80	; 128
    19dc:	bf e3       	ldi	r27, 0x3F	; 63
    19de:	89 8f       	std	Y+25, r24	; 0x19
    19e0:	9a 8f       	std	Y+26, r25	; 0x1a
    19e2:	ab 8f       	std	Y+27, r26	; 0x1b
    19e4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e6:	69 8d       	ldd	r22, Y+25	; 0x19
    19e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	4a e7       	ldi	r20, 0x7A	; 122
    19f4:	55 e4       	ldi	r21, 0x45	; 69
    19f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	8d 8b       	std	Y+21, r24	; 0x15
    1a00:	9e 8b       	std	Y+22, r25	; 0x16
    1a02:	af 8b       	std	Y+23, r26	; 0x17
    1a04:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a06:	6d 89       	ldd	r22, Y+21	; 0x15
    1a08:	7e 89       	ldd	r23, Y+22	; 0x16
    1a0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	40 e8       	ldi	r20, 0x80	; 128
    1a14:	5f e3       	ldi	r21, 0x3F	; 63
    1a16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a1a:	88 23       	and	r24, r24
    1a1c:	2c f4       	brge	.+10     	; 0x1a28 <LCD_WritePin+0xf2>
		__ticks = 1;
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	9c 8b       	std	Y+20, r25	; 0x14
    1a24:	8b 8b       	std	Y+19, r24	; 0x13
    1a26:	3f c0       	rjmp	.+126    	; 0x1aa6 <LCD_WritePin+0x170>
	else if (__tmp > 65535)
    1a28:	6d 89       	ldd	r22, Y+21	; 0x15
    1a2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	3f ef       	ldi	r19, 0xFF	; 255
    1a34:	4f e7       	ldi	r20, 0x7F	; 127
    1a36:	57 e4       	ldi	r21, 0x47	; 71
    1a38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a3c:	18 16       	cp	r1, r24
    1a3e:	4c f5       	brge	.+82     	; 0x1a92 <LCD_WritePin+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a40:	69 8d       	ldd	r22, Y+25	; 0x19
    1a42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	40 e2       	ldi	r20, 0x20	; 32
    1a4e:	51 e4       	ldi	r21, 0x41	; 65
    1a50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a54:	dc 01       	movw	r26, r24
    1a56:	cb 01       	movw	r24, r22
    1a58:	bc 01       	movw	r22, r24
    1a5a:	cd 01       	movw	r24, r26
    1a5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a60:	dc 01       	movw	r26, r24
    1a62:	cb 01       	movw	r24, r22
    1a64:	9c 8b       	std	Y+20, r25	; 0x14
    1a66:	8b 8b       	std	Y+19, r24	; 0x13
    1a68:	0f c0       	rjmp	.+30     	; 0x1a88 <LCD_WritePin+0x152>
    1a6a:	80 e9       	ldi	r24, 0x90	; 144
    1a6c:	91 e0       	ldi	r25, 0x01	; 1
    1a6e:	9a 8b       	std	Y+18, r25	; 0x12
    1a70:	89 8b       	std	Y+17, r24	; 0x11
    1a72:	89 89       	ldd	r24, Y+17	; 0x11
    1a74:	9a 89       	ldd	r25, Y+18	; 0x12
    1a76:	01 97       	sbiw	r24, 0x01	; 1
    1a78:	f1 f7       	brne	.-4      	; 0x1a76 <LCD_WritePin+0x140>
    1a7a:	9a 8b       	std	Y+18, r25	; 0x12
    1a7c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a80:	9c 89       	ldd	r25, Y+20	; 0x14
    1a82:	01 97       	sbiw	r24, 0x01	; 1
    1a84:	9c 8b       	std	Y+20, r25	; 0x14
    1a86:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a88:	8b 89       	ldd	r24, Y+19	; 0x13
    1a8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a8c:	00 97       	sbiw	r24, 0x00	; 0
    1a8e:	69 f7       	brne	.-38     	; 0x1a6a <LCD_WritePin+0x134>
    1a90:	14 c0       	rjmp	.+40     	; 0x1aba <LCD_WritePin+0x184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a92:	6d 89       	ldd	r22, Y+21	; 0x15
    1a94:	7e 89       	ldd	r23, Y+22	; 0x16
    1a96:	8f 89       	ldd	r24, Y+23	; 0x17
    1a98:	98 8d       	ldd	r25, Y+24	; 0x18
    1a9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	9c 8b       	std	Y+20, r25	; 0x14
    1aa4:	8b 8b       	std	Y+19, r24	; 0x13
    1aa6:	8b 89       	ldd	r24, Y+19	; 0x13
    1aa8:	9c 89       	ldd	r25, Y+20	; 0x14
    1aaa:	98 8b       	std	Y+16, r25	; 0x10
    1aac:	8f 87       	std	Y+15, r24	; 0x0f
    1aae:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ab0:	98 89       	ldd	r25, Y+16	; 0x10
    1ab2:	01 97       	sbiw	r24, 0x01	; 1
    1ab4:	f1 f7       	brne	.-4      	; 0x1ab2 <LCD_WritePin+0x17c>
    1ab6:	98 8b       	std	Y+16, r25	; 0x10
    1ab8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		DIO_voidSetPin(LCD_E, LOW);
    1aba:	88 e0       	ldi	r24, 0x08	; 8
    1abc:	60 e0       	ldi	r22, 0x00	; 0
    1abe:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_voidSetPin>

		DIO_voidSetPin(LCD_D4, GET_BIT(data, 0));
    1ac2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ac4:	98 2f       	mov	r25, r24
    1ac6:	91 70       	andi	r25, 0x01	; 1
    1ac8:	8e e0       	ldi	r24, 0x0E	; 14
    1aca:	69 2f       	mov	r22, r25
    1acc:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_voidSetPin>
		DIO_voidSetPin(LCD_D5, GET_BIT(data, 1));
    1ad0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ad2:	88 2f       	mov	r24, r24
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	82 70       	andi	r24, 0x02	; 2
    1ad8:	90 70       	andi	r25, 0x00	; 0
    1ada:	95 95       	asr	r25
    1adc:	87 95       	ror	r24
    1ade:	98 2f       	mov	r25, r24
    1ae0:	8d e0       	ldi	r24, 0x0D	; 13
    1ae2:	69 2f       	mov	r22, r25
    1ae4:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_voidSetPin>
		DIO_voidSetPin(LCD_D6, GET_BIT(data, 2));
    1ae8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1aea:	88 2f       	mov	r24, r24
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	84 70       	andi	r24, 0x04	; 4
    1af0:	90 70       	andi	r25, 0x00	; 0
    1af2:	95 95       	asr	r25
    1af4:	87 95       	ror	r24
    1af6:	95 95       	asr	r25
    1af8:	87 95       	ror	r24
    1afa:	98 2f       	mov	r25, r24
    1afc:	8c e0       	ldi	r24, 0x0C	; 12
    1afe:	69 2f       	mov	r22, r25
    1b00:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_voidSetPin>
		DIO_voidSetPin(LCD_D7, GET_BIT(data, 3));
    1b04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b06:	88 2f       	mov	r24, r24
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	88 70       	andi	r24, 0x08	; 8
    1b0c:	90 70       	andi	r25, 0x00	; 0
    1b0e:	95 95       	asr	r25
    1b10:	87 95       	ror	r24
    1b12:	95 95       	asr	r25
    1b14:	87 95       	ror	r24
    1b16:	95 95       	asr	r25
    1b18:	87 95       	ror	r24
    1b1a:	98 2f       	mov	r25, r24
    1b1c:	8b e0       	ldi	r24, 0x0B	; 11
    1b1e:	69 2f       	mov	r22, r25
    1b20:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_voidSetPin>

	#else
		//ERROR
	#endif
	/*Second Pulse*/
	DIO_voidSetPin(LCD_E, HIGH);
    1b24:	88 e0       	ldi	r24, 0x08	; 8
    1b26:	61 e0       	ldi	r22, 0x01	; 1
    1b28:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_voidSetPin>
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	a0 e8       	ldi	r26, 0x80	; 128
    1b32:	bf e3       	ldi	r27, 0x3F	; 63
    1b34:	8b 87       	std	Y+11, r24	; 0x0b
    1b36:	9c 87       	std	Y+12, r25	; 0x0c
    1b38:	ad 87       	std	Y+13, r26	; 0x0d
    1b3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	4a e7       	ldi	r20, 0x7A	; 122
    1b4a:	55 e4       	ldi	r21, 0x45	; 69
    1b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	8f 83       	std	Y+7, r24	; 0x07
    1b56:	98 87       	std	Y+8, r25	; 0x08
    1b58:	a9 87       	std	Y+9, r26	; 0x09
    1b5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b5e:	78 85       	ldd	r23, Y+8	; 0x08
    1b60:	89 85       	ldd	r24, Y+9	; 0x09
    1b62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	40 e8       	ldi	r20, 0x80	; 128
    1b6a:	5f e3       	ldi	r21, 0x3F	; 63
    1b6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b70:	88 23       	and	r24, r24
    1b72:	2c f4       	brge	.+10     	; 0x1b7e <LCD_WritePin+0x248>
		__ticks = 1;
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	9e 83       	std	Y+6, r25	; 0x06
    1b7a:	8d 83       	std	Y+5, r24	; 0x05
    1b7c:	3f c0       	rjmp	.+126    	; 0x1bfc <LCD_WritePin+0x2c6>
	else if (__tmp > 65535)
    1b7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b80:	78 85       	ldd	r23, Y+8	; 0x08
    1b82:	89 85       	ldd	r24, Y+9	; 0x09
    1b84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	3f ef       	ldi	r19, 0xFF	; 255
    1b8a:	4f e7       	ldi	r20, 0x7F	; 127
    1b8c:	57 e4       	ldi	r21, 0x47	; 71
    1b8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b92:	18 16       	cp	r1, r24
    1b94:	4c f5       	brge	.+82     	; 0x1be8 <LCD_WritePin+0x2b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	40 e2       	ldi	r20, 0x20	; 32
    1ba4:	51 e4       	ldi	r21, 0x41	; 65
    1ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	bc 01       	movw	r22, r24
    1bb0:	cd 01       	movw	r24, r26
    1bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	9e 83       	std	Y+6, r25	; 0x06
    1bbc:	8d 83       	std	Y+5, r24	; 0x05
    1bbe:	0f c0       	rjmp	.+30     	; 0x1bde <LCD_WritePin+0x2a8>
    1bc0:	80 e9       	ldi	r24, 0x90	; 144
    1bc2:	91 e0       	ldi	r25, 0x01	; 1
    1bc4:	9c 83       	std	Y+4, r25	; 0x04
    1bc6:	8b 83       	std	Y+3, r24	; 0x03
    1bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bca:	9c 81       	ldd	r25, Y+4	; 0x04
    1bcc:	01 97       	sbiw	r24, 0x01	; 1
    1bce:	f1 f7       	brne	.-4      	; 0x1bcc <LCD_WritePin+0x296>
    1bd0:	9c 83       	std	Y+4, r25	; 0x04
    1bd2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd8:	01 97       	sbiw	r24, 0x01	; 1
    1bda:	9e 83       	std	Y+6, r25	; 0x06
    1bdc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bde:	8d 81       	ldd	r24, Y+5	; 0x05
    1be0:	9e 81       	ldd	r25, Y+6	; 0x06
    1be2:	00 97       	sbiw	r24, 0x00	; 0
    1be4:	69 f7       	brne	.-38     	; 0x1bc0 <LCD_WritePin+0x28a>
    1be6:	14 c0       	rjmp	.+40     	; 0x1c10 <LCD_WritePin+0x2da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bea:	78 85       	ldd	r23, Y+8	; 0x08
    1bec:	89 85       	ldd	r24, Y+9	; 0x09
    1bee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	9e 83       	std	Y+6, r25	; 0x06
    1bfa:	8d 83       	std	Y+5, r24	; 0x05
    1bfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1c00:	9a 83       	std	Y+2, r25	; 0x02
    1c02:	89 83       	std	Y+1, r24	; 0x01
    1c04:	89 81       	ldd	r24, Y+1	; 0x01
    1c06:	9a 81       	ldd	r25, Y+2	; 0x02
    1c08:	01 97       	sbiw	r24, 0x01	; 1
    1c0a:	f1 f7       	brne	.-4      	; 0x1c08 <LCD_WritePin+0x2d2>
    1c0c:	9a 83       	std	Y+2, r25	; 0x02
    1c0e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_voidSetPin(LCD_E, LOW);
    1c10:	88 e0       	ldi	r24, 0x08	; 8
    1c12:	60 e0       	ldi	r22, 0x00	; 0
    1c14:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_voidSetPin>
	/*square pulse*/
}
    1c18:	6d 96       	adiw	r28, 0x1d	; 29
    1c1a:	0f b6       	in	r0, 0x3f	; 63
    1c1c:	f8 94       	cli
    1c1e:	de bf       	out	0x3e, r29	; 62
    1c20:	0f be       	out	0x3f, r0	; 63
    1c22:	cd bf       	out	0x3d, r28	; 61
    1c24:	cf 91       	pop	r28
    1c26:	df 91       	pop	r29
    1c28:	08 95       	ret

00001c2a <LCD_WriteCMD>:

static void LCD_WriteCMD(u8 CMD)
{
    1c2a:	df 93       	push	r29
    1c2c:	cf 93       	push	r28
    1c2e:	0f 92       	push	r0
    1c30:	cd b7       	in	r28, 0x3d	; 61
    1c32:	de b7       	in	r29, 0x3e	; 62
    1c34:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPin(LCD_RS, LOW); //RS = 0 Write command
    1c36:	8a e0       	ldi	r24, 0x0A	; 10
    1c38:	60 e0       	ldi	r22, 0x00	; 0
    1c3a:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_voidSetPin>
	DIO_voidSetPin(LCD_RW, LOW);
    1c3e:	89 e0       	ldi	r24, 0x09	; 9
    1c40:	60 e0       	ldi	r22, 0x00	; 0
    1c42:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_voidSetPin>
	LCD_WritePin(CMD);
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	0e 94 9b 0c 	call	0x1936	; 0x1936 <LCD_WritePin>
}
    1c4c:	0f 90       	pop	r0
    1c4e:	cf 91       	pop	r28
    1c50:	df 91       	pop	r29
    1c52:	08 95       	ret

00001c54 <LCD_WriteData>:

static void LCD_WriteData(u8 data)
{
    1c54:	df 93       	push	r29
    1c56:	cf 93       	push	r28
    1c58:	0f 92       	push	r0
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
    1c5e:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPin(LCD_RS, HIGH); //RS = 1 write data
    1c60:	8a e0       	ldi	r24, 0x0A	; 10
    1c62:	61 e0       	ldi	r22, 0x01	; 1
    1c64:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_voidSetPin>
	DIO_voidSetPin(LCD_RW, LOW);
    1c68:	89 e0       	ldi	r24, 0x09	; 9
    1c6a:	60 e0       	ldi	r22, 0x00	; 0
    1c6c:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_voidSetPin>
	LCD_WritePin(data);
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
    1c72:	0e 94 9b 0c 	call	0x1936	; 0x1936 <LCD_WritePin>
}
    1c76:	0f 90       	pop	r0
    1c78:	cf 91       	pop	r28
    1c7a:	df 91       	pop	r29
    1c7c:	08 95       	ret

00001c7e <LCD_Initialize>:

void LCD_Initialize()
{
    1c7e:	df 93       	push	r29
    1c80:	cf 93       	push	r28
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
    1c86:	2e 97       	sbiw	r28, 0x0e	; 14
    1c88:	0f b6       	in	r0, 0x3f	; 63
    1c8a:	f8 94       	cli
    1c8c:	de bf       	out	0x3e, r29	; 62
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetDDR(LCD_E, HIGH);
    1c92:	88 e0       	ldi	r24, 0x08	; 8
    1c94:	61 e0       	ldi	r22, 0x01	; 1
    1c96:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_voidSetDDR>
	DIO_voidSetDDR(LCD_RS, HIGH);
    1c9a:	8a e0       	ldi	r24, 0x0A	; 10
    1c9c:	61 e0       	ldi	r22, 0x01	; 1
    1c9e:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_voidSetDDR>
	DIO_voidSetDDR(LCD_RW, HIGH);
    1ca2:	89 e0       	ldi	r24, 0x09	; 9
    1ca4:	61 e0       	ldi	r22, 0x01	; 1
    1ca6:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_voidSetDDR>
		DIO_voidSetDDR(LCD_D6, HIGH);
		DIO_voidSetDDR(LCD_D7, HIGH);

	#elif(LCD_MODE_PIN == LCD_MODE_4)
	/*to send data on 4 mode we need to write three addresses*/
		LCD_WriteCMD(LCD_4_MODE_CMD_SEQ1);
    1caa:	83 e2       	ldi	r24, 0x23	; 35
    1cac:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <LCD_WriteCMD>
		LCD_WriteCMD(LCD_4_MODE_CMD_SEQ2);
    1cb0:	82 e2       	ldi	r24, 0x22	; 34
    1cb2:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <LCD_WriteCMD>
		LCD_WriteCMD(LCD_4_MODE_CMD_SEQ3);
    1cb6:	88 e2       	ldi	r24, 0x28	; 40
    1cb8:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <LCD_WriteCMD>

		DIO_voidSetDDR(LCD_D4, HIGH);
    1cbc:	8e e0       	ldi	r24, 0x0E	; 14
    1cbe:	61 e0       	ldi	r22, 0x01	; 1
    1cc0:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_voidSetDDR>
		DIO_voidSetDDR(LCD_D5, HIGH);
    1cc4:	8d e0       	ldi	r24, 0x0D	; 13
    1cc6:	61 e0       	ldi	r22, 0x01	; 1
    1cc8:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_voidSetDDR>
		DIO_voidSetDDR(LCD_D6, HIGH);
    1ccc:	8c e0       	ldi	r24, 0x0C	; 12
    1cce:	61 e0       	ldi	r22, 0x01	; 1
    1cd0:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_voidSetDDR>
		DIO_voidSetDDR(LCD_D7, HIGH);
    1cd4:	8b e0       	ldi	r24, 0x0B	; 11
    1cd6:	61 e0       	ldi	r22, 0x01	; 1
    1cd8:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_voidSetDDR>

	#else
		//ERROR
	#endif
	LCD_WriteCMD(LCD_DISPLAY_CMD);
    1cdc:	8e e0       	ldi	r24, 0x0E	; 14
    1cde:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <LCD_WriteCMD>
	LCD_WriteCMD(LCD_CLEAR_CMD);
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <LCD_WriteCMD>
    1ce8:	80 e0       	ldi	r24, 0x00	; 0
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	a0 e4       	ldi	r26, 0x40	; 64
    1cee:	b0 e4       	ldi	r27, 0x40	; 64
    1cf0:	8b 87       	std	Y+11, r24	; 0x0b
    1cf2:	9c 87       	std	Y+12, r25	; 0x0c
    1cf4:	ad 87       	std	Y+13, r26	; 0x0d
    1cf6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cfa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	4a e7       	ldi	r20, 0x7A	; 122
    1d06:	55 e4       	ldi	r21, 0x45	; 69
    1d08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	8f 83       	std	Y+7, r24	; 0x07
    1d12:	98 87       	std	Y+8, r25	; 0x08
    1d14:	a9 87       	std	Y+9, r26	; 0x09
    1d16:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d18:	6f 81       	ldd	r22, Y+7	; 0x07
    1d1a:	78 85       	ldd	r23, Y+8	; 0x08
    1d1c:	89 85       	ldd	r24, Y+9	; 0x09
    1d1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	40 e8       	ldi	r20, 0x80	; 128
    1d26:	5f e3       	ldi	r21, 0x3F	; 63
    1d28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d2c:	88 23       	and	r24, r24
    1d2e:	2c f4       	brge	.+10     	; 0x1d3a <LCD_Initialize+0xbc>
		__ticks = 1;
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	9e 83       	std	Y+6, r25	; 0x06
    1d36:	8d 83       	std	Y+5, r24	; 0x05
    1d38:	3f c0       	rjmp	.+126    	; 0x1db8 <LCD_Initialize+0x13a>
	else if (__tmp > 65535)
    1d3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d3c:	78 85       	ldd	r23, Y+8	; 0x08
    1d3e:	89 85       	ldd	r24, Y+9	; 0x09
    1d40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	3f ef       	ldi	r19, 0xFF	; 255
    1d46:	4f e7       	ldi	r20, 0x7F	; 127
    1d48:	57 e4       	ldi	r21, 0x47	; 71
    1d4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d4e:	18 16       	cp	r1, r24
    1d50:	4c f5       	brge	.+82     	; 0x1da4 <LCD_Initialize+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d52:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d54:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	40 e2       	ldi	r20, 0x20	; 32
    1d60:	51 e4       	ldi	r21, 0x41	; 65
    1d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	bc 01       	movw	r22, r24
    1d6c:	cd 01       	movw	r24, r26
    1d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	9e 83       	std	Y+6, r25	; 0x06
    1d78:	8d 83       	std	Y+5, r24	; 0x05
    1d7a:	0f c0       	rjmp	.+30     	; 0x1d9a <LCD_Initialize+0x11c>
    1d7c:	80 e9       	ldi	r24, 0x90	; 144
    1d7e:	91 e0       	ldi	r25, 0x01	; 1
    1d80:	9c 83       	std	Y+4, r25	; 0x04
    1d82:	8b 83       	std	Y+3, r24	; 0x03
    1d84:	8b 81       	ldd	r24, Y+3	; 0x03
    1d86:	9c 81       	ldd	r25, Y+4	; 0x04
    1d88:	01 97       	sbiw	r24, 0x01	; 1
    1d8a:	f1 f7       	brne	.-4      	; 0x1d88 <LCD_Initialize+0x10a>
    1d8c:	9c 83       	std	Y+4, r25	; 0x04
    1d8e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d90:	8d 81       	ldd	r24, Y+5	; 0x05
    1d92:	9e 81       	ldd	r25, Y+6	; 0x06
    1d94:	01 97       	sbiw	r24, 0x01	; 1
    1d96:	9e 83       	std	Y+6, r25	; 0x06
    1d98:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9e:	00 97       	sbiw	r24, 0x00	; 0
    1da0:	69 f7       	brne	.-38     	; 0x1d7c <LCD_Initialize+0xfe>
    1da2:	14 c0       	rjmp	.+40     	; 0x1dcc <LCD_Initialize+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da4:	6f 81       	ldd	r22, Y+7	; 0x07
    1da6:	78 85       	ldd	r23, Y+8	; 0x08
    1da8:	89 85       	ldd	r24, Y+9	; 0x09
    1daa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	9e 83       	std	Y+6, r25	; 0x06
    1db6:	8d 83       	std	Y+5, r24	; 0x05
    1db8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dba:	9e 81       	ldd	r25, Y+6	; 0x06
    1dbc:	9a 83       	std	Y+2, r25	; 0x02
    1dbe:	89 83       	std	Y+1, r24	; 0x01
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc4:	01 97       	sbiw	r24, 0x01	; 1
    1dc6:	f1 f7       	brne	.-4      	; 0x1dc4 <LCD_Initialize+0x146>
    1dc8:	9a 83       	std	Y+2, r25	; 0x02
    1dca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);
}
    1dcc:	2e 96       	adiw	r28, 0x0e	; 14
    1dce:	0f b6       	in	r0, 0x3f	; 63
    1dd0:	f8 94       	cli
    1dd2:	de bf       	out	0x3e, r29	; 62
    1dd4:	0f be       	out	0x3f, r0	; 63
    1dd6:	cd bf       	out	0x3d, r28	; 61
    1dd8:	cf 91       	pop	r28
    1dda:	df 91       	pop	r29
    1ddc:	08 95       	ret

00001dde <LCD_Clear>:

void LCD_Clear()
{
    1dde:	df 93       	push	r29
    1de0:	cf 93       	push	r28
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
	LCD_WriteCMD(LCD_CLEAR_CMD);
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <LCD_WriteCMD>
}
    1dec:	cf 91       	pop	r28
    1dee:	df 91       	pop	r29
    1df0:	08 95       	ret

00001df2 <LCD_Shift>:

void LCD_Shift(u8 columnShift, u8 rowShift)
{
    1df2:	df 93       	push	r29
    1df4:	cf 93       	push	r28
    1df6:	00 d0       	rcall	.+0      	; 0x1df8 <LCD_Shift+0x6>
    1df8:	cd b7       	in	r28, 0x3d	; 61
    1dfa:	de b7       	in	r29, 0x3e	; 62
    1dfc:	89 83       	std	Y+1, r24	; 0x01
    1dfe:	6a 83       	std	Y+2, r22	; 0x02
	LCD_WriteCMD(COLUMN_ZERO + columnShift + (ROW_ZERO * rowShift));
    1e00:	8a 81       	ldd	r24, Y+2	; 0x02
    1e02:	88 2f       	mov	r24, r24
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	00 24       	eor	r0, r0
    1e08:	96 95       	lsr	r25
    1e0a:	87 95       	ror	r24
    1e0c:	07 94       	ror	r0
    1e0e:	96 95       	lsr	r25
    1e10:	87 95       	ror	r24
    1e12:	07 94       	ror	r0
    1e14:	98 2f       	mov	r25, r24
    1e16:	80 2d       	mov	r24, r0
    1e18:	98 2f       	mov	r25, r24
    1e1a:	89 81       	ldd	r24, Y+1	; 0x01
    1e1c:	89 0f       	add	r24, r25
    1e1e:	80 58       	subi	r24, 0x80	; 128
    1e20:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <LCD_WriteCMD>
}
    1e24:	0f 90       	pop	r0
    1e26:	0f 90       	pop	r0
    1e28:	cf 91       	pop	r28
    1e2a:	df 91       	pop	r29
    1e2c:	08 95       	ret

00001e2e <LCD_WriteString>:

void LCD_WriteString(u8 *str)
{
    1e2e:	df 93       	push	r29
    1e30:	cf 93       	push	r28
    1e32:	00 d0       	rcall	.+0      	; 0x1e34 <LCD_WriteString+0x6>
    1e34:	0f 92       	push	r0
    1e36:	cd b7       	in	r28, 0x3d	; 61
    1e38:	de b7       	in	r29, 0x3e	; 62
    1e3a:	9b 83       	std	Y+3, r25	; 0x03
    1e3c:	8a 83       	std	Y+2, r24	; 0x02
	u8 charCnt = 0;
    1e3e:	19 82       	std	Y+1, r1	; 0x01
    1e40:	0f c0       	rjmp	.+30     	; 0x1e60 <LCD_WriteString+0x32>
	while(str[charCnt] != '\0')
	{
		LCD_WriteData(str[charCnt++]);
    1e42:	89 81       	ldd	r24, Y+1	; 0x01
    1e44:	28 2f       	mov	r18, r24
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e4c:	fc 01       	movw	r30, r24
    1e4e:	e2 0f       	add	r30, r18
    1e50:	f3 1f       	adc	r31, r19
    1e52:	90 81       	ld	r25, Z
    1e54:	89 81       	ldd	r24, Y+1	; 0x01
    1e56:	8f 5f       	subi	r24, 0xFF	; 255
    1e58:	89 83       	std	Y+1, r24	; 0x01
    1e5a:	89 2f       	mov	r24, r25
    1e5c:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <LCD_WriteData>
}

void LCD_WriteString(u8 *str)
{
	u8 charCnt = 0;
	while(str[charCnt] != '\0')
    1e60:	89 81       	ldd	r24, Y+1	; 0x01
    1e62:	28 2f       	mov	r18, r24
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	8a 81       	ldd	r24, Y+2	; 0x02
    1e68:	9b 81       	ldd	r25, Y+3	; 0x03
    1e6a:	fc 01       	movw	r30, r24
    1e6c:	e2 0f       	add	r30, r18
    1e6e:	f3 1f       	adc	r31, r19
    1e70:	80 81       	ld	r24, Z
    1e72:	88 23       	and	r24, r24
    1e74:	31 f7       	brne	.-52     	; 0x1e42 <LCD_WriteString+0x14>
	{
		LCD_WriteData(str[charCnt++]);
	}
}
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	cf 91       	pop	r28
    1e7e:	df 91       	pop	r29
    1e80:	08 95       	ret

00001e82 <LED_Initialize>:
#include "STD_TYPES.h"
#include "DIO.h"
#include "LED.h"

void LED_Initialize()
{
    1e82:	df 93       	push	r29
    1e84:	cf 93       	push	r28
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetDDR(LED_0, HIGH);
    1e8a:	84 e0       	ldi	r24, 0x04	; 4
    1e8c:	61 e0       	ldi	r22, 0x01	; 1
    1e8e:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_voidSetDDR>
	DIO_voidSetDDR(LED_1, HIGH);
    1e92:	85 e0       	ldi	r24, 0x05	; 5
    1e94:	61 e0       	ldi	r22, 0x01	; 1
    1e96:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_voidSetDDR>
	DIO_voidSetDDR(LED_2, HIGH);
    1e9a:	86 e0       	ldi	r24, 0x06	; 6
    1e9c:	61 e0       	ldi	r22, 0x01	; 1
    1e9e:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_voidSetDDR>
}
    1ea2:	cf 91       	pop	r28
    1ea4:	df 91       	pop	r29
    1ea6:	08 95       	ret

00001ea8 <LED_ON>:

void LED_ON(u8 LED_Channel)
{
    1ea8:	df 93       	push	r29
    1eaa:	cf 93       	push	r28
    1eac:	00 d0       	rcall	.+0      	; 0x1eae <LED_ON+0x6>
    1eae:	0f 92       	push	r0
    1eb0:	cd b7       	in	r28, 0x3d	; 61
    1eb2:	de b7       	in	r29, 0x3e	; 62
    1eb4:	89 83       	std	Y+1, r24	; 0x01
	switch(LED_Channel)
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
    1eb8:	28 2f       	mov	r18, r24
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	3b 83       	std	Y+3, r19	; 0x03
    1ebe:	2a 83       	std	Y+2, r18	; 0x02
    1ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec4:	81 30       	cpi	r24, 0x01	; 1
    1ec6:	91 05       	cpc	r25, r1
    1ec8:	71 f0       	breq	.+28     	; 0x1ee6 <LED_ON+0x3e>
    1eca:	2a 81       	ldd	r18, Y+2	; 0x02
    1ecc:	3b 81       	ldd	r19, Y+3	; 0x03
    1ece:	22 30       	cpi	r18, 0x02	; 2
    1ed0:	31 05       	cpc	r19, r1
    1ed2:	71 f0       	breq	.+28     	; 0x1ef0 <LED_ON+0x48>
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed8:	00 97       	sbiw	r24, 0x00	; 0
    1eda:	71 f4       	brne	.+28     	; 0x1ef8 <LED_ON+0x50>
	{
		case LED_CHANNEL_0 :
			DIO_voidSetPin(LED_0, HIGH);
    1edc:	84 e0       	ldi	r24, 0x04	; 4
    1ede:	61 e0       	ldi	r22, 0x01	; 1
    1ee0:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_voidSetPin>
    1ee4:	09 c0       	rjmp	.+18     	; 0x1ef8 <LED_ON+0x50>
			break;
		case LED_CHANNEL_1 :
			DIO_voidSetPin(LED_1, HIGH);
    1ee6:	85 e0       	ldi	r24, 0x05	; 5
    1ee8:	61 e0       	ldi	r22, 0x01	; 1
    1eea:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_voidSetPin>
    1eee:	04 c0       	rjmp	.+8      	; 0x1ef8 <LED_ON+0x50>
			break;
		case LED_CHANNEL_2 :
			DIO_voidSetPin(LED_2, HIGH);
    1ef0:	86 e0       	ldi	r24, 0x06	; 6
    1ef2:	61 e0       	ldi	r22, 0x01	; 1
    1ef4:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_voidSetPin>
			break;
	}
}
    1ef8:	0f 90       	pop	r0
    1efa:	0f 90       	pop	r0
    1efc:	0f 90       	pop	r0
    1efe:	cf 91       	pop	r28
    1f00:	df 91       	pop	r29
    1f02:	08 95       	ret

00001f04 <LED_OFF>:

void LED_OFF(u8 LED_Channel)
{
    1f04:	df 93       	push	r29
    1f06:	cf 93       	push	r28
    1f08:	00 d0       	rcall	.+0      	; 0x1f0a <LED_OFF+0x6>
    1f0a:	0f 92       	push	r0
    1f0c:	cd b7       	in	r28, 0x3d	; 61
    1f0e:	de b7       	in	r29, 0x3e	; 62
    1f10:	89 83       	std	Y+1, r24	; 0x01
	switch(LED_Channel)
    1f12:	89 81       	ldd	r24, Y+1	; 0x01
    1f14:	28 2f       	mov	r18, r24
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	3b 83       	std	Y+3, r19	; 0x03
    1f1a:	2a 83       	std	Y+2, r18	; 0x02
    1f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f20:	81 30       	cpi	r24, 0x01	; 1
    1f22:	91 05       	cpc	r25, r1
    1f24:	71 f0       	breq	.+28     	; 0x1f42 <LED_OFF+0x3e>
    1f26:	2a 81       	ldd	r18, Y+2	; 0x02
    1f28:	3b 81       	ldd	r19, Y+3	; 0x03
    1f2a:	22 30       	cpi	r18, 0x02	; 2
    1f2c:	31 05       	cpc	r19, r1
    1f2e:	71 f0       	breq	.+28     	; 0x1f4c <LED_OFF+0x48>
    1f30:	8a 81       	ldd	r24, Y+2	; 0x02
    1f32:	9b 81       	ldd	r25, Y+3	; 0x03
    1f34:	00 97       	sbiw	r24, 0x00	; 0
    1f36:	71 f4       	brne	.+28     	; 0x1f54 <LED_OFF+0x50>
	{
		case LED_CHANNEL_0 :
			DIO_voidSetPin(LED_0, LOW);
    1f38:	84 e0       	ldi	r24, 0x04	; 4
    1f3a:	60 e0       	ldi	r22, 0x00	; 0
    1f3c:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_voidSetPin>
    1f40:	09 c0       	rjmp	.+18     	; 0x1f54 <LED_OFF+0x50>
			break;
		case LED_CHANNEL_1 :
			DIO_voidSetPin(LED_1, LOW);
    1f42:	85 e0       	ldi	r24, 0x05	; 5
    1f44:	60 e0       	ldi	r22, 0x00	; 0
    1f46:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_voidSetPin>
    1f4a:	04 c0       	rjmp	.+8      	; 0x1f54 <LED_OFF+0x50>
			break;
		case LED_CHANNEL_2 :
			DIO_voidSetPin(LED_2, LOW);
    1f4c:	86 e0       	ldi	r24, 0x06	; 6
    1f4e:	60 e0       	ldi	r22, 0x00	; 0
    1f50:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_voidSetPin>
			break;
	}
}
    1f54:	0f 90       	pop	r0
    1f56:	0f 90       	pop	r0
    1f58:	0f 90       	pop	r0
    1f5a:	cf 91       	pop	r28
    1f5c:	df 91       	pop	r29
    1f5e:	08 95       	ret

00001f60 <LED_Toggle>:

void LED_Toggle(u8 LED_Channel)
{
    1f60:	df 93       	push	r29
    1f62:	cf 93       	push	r28
    1f64:	00 d0       	rcall	.+0      	; 0x1f66 <LED_Toggle+0x6>
    1f66:	00 d0       	rcall	.+0      	; 0x1f68 <LED_Toggle+0x8>
    1f68:	cd b7       	in	r28, 0x3d	; 61
    1f6a:	de b7       	in	r29, 0x3e	; 62
    1f6c:	8a 83       	std	Y+2, r24	; 0x02
	u8 LEDStatus = 0;
    1f6e:	19 82       	std	Y+1, r1	; 0x01
	switch(LED_Channel)
    1f70:	8a 81       	ldd	r24, Y+2	; 0x02
    1f72:	28 2f       	mov	r18, r24
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	3c 83       	std	Y+4, r19	; 0x04
    1f78:	2b 83       	std	Y+3, r18	; 0x03
    1f7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f7e:	81 30       	cpi	r24, 0x01	; 1
    1f80:	91 05       	cpc	r25, r1
    1f82:	b1 f0       	breq	.+44     	; 0x1fb0 <LED_Toggle+0x50>
    1f84:	2b 81       	ldd	r18, Y+3	; 0x03
    1f86:	3c 81       	ldd	r19, Y+4	; 0x04
    1f88:	22 30       	cpi	r18, 0x02	; 2
    1f8a:	31 05       	cpc	r19, r1
    1f8c:	f1 f0       	breq	.+60     	; 0x1fca <LED_Toggle+0x6a>
    1f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f90:	9c 81       	ldd	r25, Y+4	; 0x04
    1f92:	00 97       	sbiw	r24, 0x00	; 0
    1f94:	31 f5       	brne	.+76     	; 0x1fe2 <LED_Toggle+0x82>
	{
		case LED_CHANNEL_0 :
			LEDStatus = DIO_getPinVal(LED_0);
    1f96:	84 e0       	ldi	r24, 0x04	; 4
    1f98:	0e 94 2e 0a 	call	0x145c	; 0x145c <DIO_getPinVal>
    1f9c:	89 83       	std	Y+1, r24	; 0x01
			DIO_voidSetPin(LED_0, (LEDStatus ^= 1));
    1f9e:	99 81       	ldd	r25, Y+1	; 0x01
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	89 27       	eor	r24, r25
    1fa4:	89 83       	std	Y+1, r24	; 0x01
    1fa6:	84 e0       	ldi	r24, 0x04	; 4
    1fa8:	69 81       	ldd	r22, Y+1	; 0x01
    1faa:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_voidSetPin>
    1fae:	19 c0       	rjmp	.+50     	; 0x1fe2 <LED_Toggle+0x82>
			break;
		case LED_CHANNEL_1 :
			LEDStatus = DIO_getPinVal(LED_1);
    1fb0:	85 e0       	ldi	r24, 0x05	; 5
    1fb2:	0e 94 2e 0a 	call	0x145c	; 0x145c <DIO_getPinVal>
    1fb6:	89 83       	std	Y+1, r24	; 0x01
			DIO_voidSetPin(LED_1, (LEDStatus ^= 1));
    1fb8:	99 81       	ldd	r25, Y+1	; 0x01
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	89 27       	eor	r24, r25
    1fbe:	89 83       	std	Y+1, r24	; 0x01
    1fc0:	85 e0       	ldi	r24, 0x05	; 5
    1fc2:	69 81       	ldd	r22, Y+1	; 0x01
    1fc4:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_voidSetPin>
    1fc8:	0c c0       	rjmp	.+24     	; 0x1fe2 <LED_Toggle+0x82>
			break;
		case LED_CHANNEL_2 :
			LEDStatus = DIO_getPinVal(LED_2);
    1fca:	86 e0       	ldi	r24, 0x06	; 6
    1fcc:	0e 94 2e 0a 	call	0x145c	; 0x145c <DIO_getPinVal>
    1fd0:	89 83       	std	Y+1, r24	; 0x01
			DIO_voidSetPin(LED_2, (LEDStatus ^= 1));
    1fd2:	99 81       	ldd	r25, Y+1	; 0x01
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	89 27       	eor	r24, r25
    1fd8:	89 83       	std	Y+1, r24	; 0x01
    1fda:	86 e0       	ldi	r24, 0x06	; 6
    1fdc:	69 81       	ldd	r22, Y+1	; 0x01
    1fde:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_voidSetPin>
			break;
	}
}
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	cf 91       	pop	r28
    1fec:	df 91       	pop	r29
    1fee:	08 95       	ret

00001ff0 <SERVO_Initialize>:
#include "GIE.h"
#include "TIM.h"
#include "SERVO.h"

void SERVO_Initialize()
{
    1ff0:	df 93       	push	r29
    1ff2:	cf 93       	push	r28
    1ff4:	cd b7       	in	r28, 0x3d	; 61
    1ff6:	de b7       	in	r29, 0x3e	; 62
	TIM_voidInitialize();
    1ff8:	0e 94 66 10 	call	0x20cc	; 0x20cc <TIM_voidInitialize>
}
    1ffc:	cf 91       	pop	r28
    1ffe:	df 91       	pop	r29
    2000:	08 95       	ret

00002002 <SERVO_ON>:

void SERVO_ON()
{
    2002:	df 93       	push	r29
    2004:	cf 93       	push	r28
    2006:	cd b7       	in	r28, 0x3d	; 61
    2008:	de b7       	in	r29, 0x3e	; 62
	TIM_voidSetCompareValue(15);  //Open degree
    200a:	8f e0       	ldi	r24, 0x0F	; 15
    200c:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <TIM_voidSetCompareValue>
}
    2010:	cf 91       	pop	r28
    2012:	df 91       	pop	r29
    2014:	08 95       	ret

00002016 <SERVO_OFF>:

void SERVO_OFF()
{
    2016:	df 93       	push	r29
    2018:	cf 93       	push	r28
    201a:	cd b7       	in	r28, 0x3d	; 61
    201c:	de b7       	in	r29, 0x3e	; 62
	TIM_voidSetCompareValue(200);  //Close degree
    201e:	88 ec       	ldi	r24, 0xC8	; 200
    2020:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <TIM_voidSetCompareValue>
}
    2024:	cf 91       	pop	r28
    2026:	df 91       	pop	r29
    2028:	08 95       	ret

0000202a <TEMP_Initialize>:
#include "ADC.h"
#include <stdlib.h>
#include "TEMP_SENSOR.h"

void TEMP_Initialize()
{
    202a:	df 93       	push	r29
    202c:	cf 93       	push	r28
    202e:	cd b7       	in	r28, 0x3d	; 61
    2030:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetDDR(LM35, LOW); //Set LM35 Input
    2032:	88 e1       	ldi	r24, 0x18	; 24
    2034:	60 e0       	ldi	r22, 0x00	; 0
    2036:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_voidSetDDR>
	ADC_Init();
    203a:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_Init>
}
    203e:	cf 91       	pop	r28
    2040:	df 91       	pop	r29
    2042:	08 95       	ret

00002044 <TEMP_READ>:

u8 TEMP_READ()
{
    2044:	df 93       	push	r29
    2046:	cf 93       	push	r28
    2048:	cd b7       	in	r28, 0x3d	; 61
    204a:	de b7       	in	r29, 0x3e	; 62
	return (((ADC_GetResult(0))*4.88f)/10);
    204c:	80 e0       	ldi	r24, 0x00	; 0
    204e:	0e 94 26 07 	call	0xe4c	; 0xe4c <ADC_GetResult>
    2052:	cc 01       	movw	r24, r24
    2054:	a0 e0       	ldi	r26, 0x00	; 0
    2056:	b0 e0       	ldi	r27, 0x00	; 0
    2058:	bc 01       	movw	r22, r24
    205a:	cd 01       	movw	r24, r26
    205c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	bc 01       	movw	r22, r24
    2066:	cd 01       	movw	r24, r26
    2068:	26 ef       	ldi	r18, 0xF6	; 246
    206a:	38 e2       	ldi	r19, 0x28	; 40
    206c:	4c e9       	ldi	r20, 0x9C	; 156
    206e:	50 e4       	ldi	r21, 0x40	; 64
    2070:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	bc 01       	movw	r22, r24
    207a:	cd 01       	movw	r24, r26
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	40 e2       	ldi	r20, 0x20	; 32
    2082:	51 e4       	ldi	r21, 0x41	; 65
    2084:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2088:	dc 01       	movw	r26, r24
    208a:	cb 01       	movw	r24, r22
    208c:	bc 01       	movw	r22, r24
    208e:	cd 01       	movw	r24, r26
    2090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
}
    2098:	cf 91       	pop	r28
    209a:	df 91       	pop	r29
    209c:	08 95       	ret

0000209e <TEMP_STR_READ>:


void TEMP_STR_READ(char *strPtr)
{
    209e:	df 93       	push	r29
    20a0:	cf 93       	push	r28
    20a2:	00 d0       	rcall	.+0      	; 0x20a4 <TEMP_STR_READ+0x6>
    20a4:	cd b7       	in	r28, 0x3d	; 61
    20a6:	de b7       	in	r29, 0x3e	; 62
    20a8:	9a 83       	std	Y+2, r25	; 0x02
    20aa:	89 83       	std	Y+1, r24	; 0x01
	itoa(TEMP_READ(), strPtr, 10);
    20ac:	0e 94 22 10 	call	0x2044	; 0x2044 <TEMP_READ>
    20b0:	88 2f       	mov	r24, r24
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	29 81       	ldd	r18, Y+1	; 0x01
    20b6:	3a 81       	ldd	r19, Y+2	; 0x02
    20b8:	b9 01       	movw	r22, r18
    20ba:	4a e0       	ldi	r20, 0x0A	; 10
    20bc:	50 e0       	ldi	r21, 0x00	; 0
    20be:	0e 94 d6 11 	call	0x23ac	; 0x23ac <itoa>
}
    20c2:	0f 90       	pop	r0
    20c4:	0f 90       	pop	r0
    20c6:	cf 91       	pop	r28
    20c8:	df 91       	pop	r29
    20ca:	08 95       	ret

000020cc <TIM_voidInitialize>:

static Ptr2FuncType TIM_CallBacKFunc;

/*Description: This function shall initialize the Timer peripheral*/
void TIM_voidInitialize()
{
    20cc:	df 93       	push	r29
    20ce:	cf 93       	push	r28
    20d0:	cd b7       	in	r28, 0x3d	; 61
    20d2:	de b7       	in	r29, 0x3e	; 62
	//Clear Flag
	TIFR |= TIFR_CLEAR_MSK;
    20d4:	a8 e5       	ldi	r26, 0x58	; 88
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	e8 e5       	ldi	r30, 0x58	; 88
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	80 81       	ld	r24, Z
    20de:	83 60       	ori	r24, 0x03	; 3
    20e0:	8c 93       	st	X, r24

	//Disable Interrupt
	TIMSK &= TIMSK_CLEAR_MSK;
    20e2:	a9 e5       	ldi	r26, 0x59	; 89
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	e9 e5       	ldi	r30, 0x59	; 89
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
    20ec:	8c 7f       	andi	r24, 0xFC	; 252
    20ee:	8c 93       	st	X, r24

	//Initialize Timer Register
	TCNT0 = TIM_INIT_VALUE;
    20f0:	e2 e5       	ldi	r30, 0x52	; 82
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	10 82       	st	Z, r1

	//Clear CS00, CS01, CS02 Division Mode Bits
	TCCR0 &= TIM_DIV_CLEAR_MSK;
    20f6:	a3 e5       	ldi	r26, 0x53	; 83
    20f8:	b0 e0       	ldi	r27, 0x00	; 0
    20fa:	e3 e5       	ldi	r30, 0x53	; 83
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	80 81       	ld	r24, Z
    2100:	88 7f       	andi	r24, 0xF8	; 248
    2102:	8c 93       	st	X, r24
		case TIM_DIV_BY_8 :
			TCCR0 |= TIM_DIV_BY_8_MSK;
			break;

		case TIM_DIV_BY_64 :
			TCCR0 |= TIM_DIV_BY_64_MSK;
    2104:	a3 e5       	ldi	r26, 0x53	; 83
    2106:	b0 e0       	ldi	r27, 0x00	; 0
    2108:	e3 e5       	ldi	r30, 0x53	; 83
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	80 81       	ld	r24, Z
    210e:	83 60       	ori	r24, 0x03	; 3
    2110:	8c 93       	st	X, r24
			break;

	}

	//Clear WGM01, WGM00 Timer Mode Bits
	TCCR0 &= TIM_MODE_CLEAR_MSK;
    2112:	a3 e5       	ldi	r26, 0x53	; 83
    2114:	b0 e0       	ldi	r27, 0x00	; 0
    2116:	e3 e5       	ldi	r30, 0x53	; 83
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	80 81       	ld	r24, Z
    211c:	87 7b       	andi	r24, 0xB7	; 183
    211e:	8c 93       	st	X, r24
					break;
			}
			break;

		case TIM_MODE_FAST_PWM :
			TCCR0 |= TIM_MODE_FAST_PWM_MSK;
    2120:	a3 e5       	ldi	r26, 0x53	; 83
    2122:	b0 e0       	ldi	r27, 0x00	; 0
    2124:	e3 e5       	ldi	r30, 0x53	; 83
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	80 81       	ld	r24, Z
    212a:	88 64       	ori	r24, 0x48	; 72
    212c:	8c 93       	st	X, r24
			OCR0 = INIT_COMPARE_VALUE;
    212e:	ec e5       	ldi	r30, 0x5C	; 92
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	8a ef       	ldi	r24, 0xFA	; 250
    2134:	80 83       	st	Z, r24

			//Clear COM01, COM00 OC Mode Bits
			TCCR0 &= OC_CLEAR_MSK;
    2136:	a3 e5       	ldi	r26, 0x53	; 83
    2138:	b0 e0       	ldi	r27, 0x00	; 0
    213a:	e3 e5       	ldi	r30, 0x53	; 83
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	80 81       	ld	r24, Z
    2140:	8f 7c       	andi	r24, 0xCF	; 207
    2142:	8c 93       	st	X, r24
				case OC_NON_INVERTING :
					TCCR0 |= OC_NON_INVERTING_MSK;
					DIO_voidSetDDR(PIN_19, HIGH);
					break;
				case OC_INVERTING :
					TCCR0 |= OC_INVERTING_MSK;
    2144:	a3 e5       	ldi	r26, 0x53	; 83
    2146:	b0 e0       	ldi	r27, 0x00	; 0
    2148:	e3 e5       	ldi	r30, 0x53	; 83
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	80 81       	ld	r24, Z
    214e:	80 63       	ori	r24, 0x30	; 48
    2150:	8c 93       	st	X, r24
					DIO_voidSetDDR(PIN_19, HIGH);
    2152:	83 e1       	ldi	r24, 0x13	; 19
    2154:	61 e0       	ldi	r22, 0x01	; 1
    2156:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DIO_voidSetDDR>
					break;
			}
			break;
	}
}
    215a:	cf 91       	pop	r28
    215c:	df 91       	pop	r29
    215e:	08 95       	ret

00002160 <TIM_voidEnableInterrupt>:

/*Description: enable Timer interrupt*/
void TIM_voidEnableInterrupt()
{
    2160:	df 93       	push	r29
    2162:	cf 93       	push	r28
    2164:	cd b7       	in	r28, 0x3d	; 61
    2166:	de b7       	in	r29, 0x3e	; 62
	TIMSK &= TIMSK_CLEAR_MSK;
    2168:	a9 e5       	ldi	r26, 0x59	; 89
    216a:	b0 e0       	ldi	r27, 0x00	; 0
    216c:	e9 e5       	ldi	r30, 0x59	; 89
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	80 81       	ld	r24, Z
    2172:	8c 7f       	andi	r24, 0xFC	; 252
    2174:	8c 93       	st	X, r24
		case TIM_MODE_NORMAL :
			TIMSK |= TIMSK_OV_ENABLE_MSK;
			break;
		case TIM_MODE_CTC :
		case TIM_MODE_FAST_PWM :
			TIMSK |= TIMSK_OC_ENABLE_MSK;
    2176:	a9 e5       	ldi	r26, 0x59	; 89
    2178:	b0 e0       	ldi	r27, 0x00	; 0
    217a:	e9 e5       	ldi	r30, 0x59	; 89
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	80 81       	ld	r24, Z
    2180:	82 60       	ori	r24, 0x02	; 2
    2182:	8c 93       	st	X, r24
			break;
	}
}
    2184:	cf 91       	pop	r28
    2186:	df 91       	pop	r29
    2188:	08 95       	ret

0000218a <TIM_voidDisableInterrupt>:

/*Description: disable Timer interrupt*/
void TIM_voidDisableInterrupt()
{
    218a:	df 93       	push	r29
    218c:	cf 93       	push	r28
    218e:	cd b7       	in	r28, 0x3d	; 61
    2190:	de b7       	in	r29, 0x3e	; 62
	TIMSK &= TIMSK_CLEAR_MSK;
    2192:	a9 e5       	ldi	r26, 0x59	; 89
    2194:	b0 e0       	ldi	r27, 0x00	; 0
    2196:	e9 e5       	ldi	r30, 0x59	; 89
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	80 81       	ld	r24, Z
    219c:	8c 7f       	andi	r24, 0xFC	; 252
    219e:	8c 93       	st	X, r24
}
    21a0:	cf 91       	pop	r28
    21a2:	df 91       	pop	r29
    21a4:	08 95       	ret

000021a6 <TIM_voidInitTimerRegister>:

/*Description: initialize timer register*/
void TIM_voidInitTimerRegister(u8 startCnt)
{
    21a6:	df 93       	push	r29
    21a8:	cf 93       	push	r28
    21aa:	0f 92       	push	r0
    21ac:	cd b7       	in	r28, 0x3d	; 61
    21ae:	de b7       	in	r29, 0x3e	; 62
    21b0:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = startCnt;
    21b2:	e2 e5       	ldi	r30, 0x52	; 82
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	89 81       	ldd	r24, Y+1	; 0x01
    21b8:	80 83       	st	Z, r24
}
    21ba:	0f 90       	pop	r0
    21bc:	cf 91       	pop	r28
    21be:	df 91       	pop	r29
    21c0:	08 95       	ret

000021c2 <TIM_voidSetCompareValue>:

/*description function to set the compare register with certain value*/
void TIM_voidSetCompareValue(u8 compareVal)
{
    21c2:	df 93       	push	r29
    21c4:	cf 93       	push	r28
    21c6:	0f 92       	push	r0
    21c8:	cd b7       	in	r28, 0x3d	; 61
    21ca:	de b7       	in	r29, 0x3e	; 62
    21cc:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = compareVal;
    21ce:	ec e5       	ldi	r30, 0x5C	; 92
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	89 81       	ldd	r24, Y+1	; 0x01
    21d4:	80 83       	st	Z, r24
}
    21d6:	0f 90       	pop	r0
    21d8:	cf 91       	pop	r28
    21da:	df 91       	pop	r29
    21dc:	08 95       	ret

000021de <TIM_voidSetCallBack>:

/*Description: set Timer callback function*/
void TIM_voidSetCallBack(Ptr2FuncType funcPtr)
{
    21de:	df 93       	push	r29
    21e0:	cf 93       	push	r28
    21e2:	00 d0       	rcall	.+0      	; 0x21e4 <TIM_voidSetCallBack+0x6>
    21e4:	cd b7       	in	r28, 0x3d	; 61
    21e6:	de b7       	in	r29, 0x3e	; 62
    21e8:	9a 83       	std	Y+2, r25	; 0x02
    21ea:	89 83       	std	Y+1, r24	; 0x01
	TIM_CallBacKFunc = funcPtr;
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	9a 81       	ldd	r25, Y+2	; 0x02
    21f0:	90 93 71 01 	sts	0x0171, r25
    21f4:	80 93 70 01 	sts	0x0170, r24
}
    21f8:	0f 90       	pop	r0
    21fa:	0f 90       	pop	r0
    21fc:	cf 91       	pop	r28
    21fe:	df 91       	pop	r29
    2200:	08 95       	ret

00002202 <__vector_11>:

/*defining the interrupt handling function*/
void __vector_11 (void)__attribute__((signal,used));
void __vector_11 (void)
{
    2202:	1f 92       	push	r1
    2204:	0f 92       	push	r0
    2206:	0f b6       	in	r0, 0x3f	; 63
    2208:	0f 92       	push	r0
    220a:	11 24       	eor	r1, r1
    220c:	2f 93       	push	r18
    220e:	3f 93       	push	r19
    2210:	4f 93       	push	r20
    2212:	5f 93       	push	r21
    2214:	6f 93       	push	r22
    2216:	7f 93       	push	r23
    2218:	8f 93       	push	r24
    221a:	9f 93       	push	r25
    221c:	af 93       	push	r26
    221e:	bf 93       	push	r27
    2220:	ef 93       	push	r30
    2222:	ff 93       	push	r31
    2224:	df 93       	push	r29
    2226:	cf 93       	push	r28
    2228:	cd b7       	in	r28, 0x3d	; 61
    222a:	de b7       	in	r29, 0x3e	; 62
	TIM_CallBacKFunc();
    222c:	e0 91 70 01 	lds	r30, 0x0170
    2230:	f0 91 71 01 	lds	r31, 0x0171
    2234:	09 95       	icall
}
    2236:	cf 91       	pop	r28
    2238:	df 91       	pop	r29
    223a:	ff 91       	pop	r31
    223c:	ef 91       	pop	r30
    223e:	bf 91       	pop	r27
    2240:	af 91       	pop	r26
    2242:	9f 91       	pop	r25
    2244:	8f 91       	pop	r24
    2246:	7f 91       	pop	r23
    2248:	6f 91       	pop	r22
    224a:	5f 91       	pop	r21
    224c:	4f 91       	pop	r20
    224e:	3f 91       	pop	r19
    2250:	2f 91       	pop	r18
    2252:	0f 90       	pop	r0
    2254:	0f be       	out	0x3f, r0	; 63
    2256:	0f 90       	pop	r0
    2258:	1f 90       	pop	r1
    225a:	18 95       	reti

0000225c <__vector_10>:

void __vector_10 (void)__attribute__((signal,used));
void __vector_10 (void)
{
    225c:	1f 92       	push	r1
    225e:	0f 92       	push	r0
    2260:	0f b6       	in	r0, 0x3f	; 63
    2262:	0f 92       	push	r0
    2264:	11 24       	eor	r1, r1
    2266:	2f 93       	push	r18
    2268:	3f 93       	push	r19
    226a:	4f 93       	push	r20
    226c:	5f 93       	push	r21
    226e:	6f 93       	push	r22
    2270:	7f 93       	push	r23
    2272:	8f 93       	push	r24
    2274:	9f 93       	push	r25
    2276:	af 93       	push	r26
    2278:	bf 93       	push	r27
    227a:	ef 93       	push	r30
    227c:	ff 93       	push	r31
    227e:	df 93       	push	r29
    2280:	cf 93       	push	r28
    2282:	cd b7       	in	r28, 0x3d	; 61
    2284:	de b7       	in	r29, 0x3e	; 62
	TIM_CallBacKFunc();
    2286:	e0 91 70 01 	lds	r30, 0x0170
    228a:	f0 91 71 01 	lds	r31, 0x0171
    228e:	09 95       	icall
}
    2290:	cf 91       	pop	r28
    2292:	df 91       	pop	r29
    2294:	ff 91       	pop	r31
    2296:	ef 91       	pop	r30
    2298:	bf 91       	pop	r27
    229a:	af 91       	pop	r26
    229c:	9f 91       	pop	r25
    229e:	8f 91       	pop	r24
    22a0:	7f 91       	pop	r23
    22a2:	6f 91       	pop	r22
    22a4:	5f 91       	pop	r21
    22a6:	4f 91       	pop	r20
    22a8:	3f 91       	pop	r19
    22aa:	2f 91       	pop	r18
    22ac:	0f 90       	pop	r0
    22ae:	0f be       	out	0x3f, r0	; 63
    22b0:	0f 90       	pop	r0
    22b2:	1f 90       	pop	r1
    22b4:	18 95       	reti

000022b6 <UART_Initialize>:
#include "UART_REG.h"
#include "UART_CFG.h"
#include "UART.h"

void UART_Initialize(void)
{
    22b6:	df 93       	push	r29
    22b8:	cf 93       	push	r28
    22ba:	cd b7       	in	r28, 0x3d	; 61
    22bc:	de b7       	in	r29, 0x3e	; 62
	  UBRRL = BAUD_PRESCALE;// Load lower 8-bits into the low byte of the UBRR register
    22be:	e9 e2       	ldi	r30, 0x29	; 41
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	87 e6       	ldi	r24, 0x67	; 103
    22c4:	80 83       	st	Z, r24
	  UBRRH = (BAUD_PRESCALE >> 8);
    22c6:	e0 e4       	ldi	r30, 0x40	; 64
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	10 82       	st	Z, r1

	  /* Load upper 8-bits into the high byte of the UBRR register Default frame format is 8 data bits, no parity, 1 stop bit to change use UCSRC, see AVR data sheet*/
	  // Enable receiver and transmitter and receive complete interrupt
	  UCSRB = ((1<<TXEN) | (1<<RXEN) | (1<<RXCIE));
    22cc:	ea e2       	ldi	r30, 0x2A	; 42
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	88 e9       	ldi	r24, 0x98	; 152
    22d2:	80 83       	st	Z, r24
}
    22d4:	cf 91       	pop	r28
    22d6:	df 91       	pop	r29
    22d8:	08 95       	ret

000022da <UART_Write>:

void UART_Write(u8 data)
{
    22da:	df 93       	push	r29
    22dc:	cf 93       	push	r28
    22de:	00 d0       	rcall	.+0      	; 0x22e0 <UART_Write+0x6>
    22e0:	0f 92       	push	r0
    22e2:	cd b7       	in	r28, 0x3d	; 61
    22e4:	de b7       	in	r29, 0x3e	; 62
    22e6:	89 83       	std	Y+1, r24	; 0x01
	while(!GET_BIT(UCSRA, UDRE));
    22e8:	eb e2       	ldi	r30, 0x2B	; 43
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	80 81       	ld	r24, Z
	UDR = data;
    22ee:	ec e2       	ldi	r30, 0x2C	; 44
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	89 81       	ldd	r24, Y+1	; 0x01
    22f4:	80 83       	st	Z, r24
	while(!GET_BIT(UCSRA, TXC));
    22f6:	eb e2       	ldi	r30, 0x2B	; 43
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	80 81       	ld	r24, Z
}
    22fc:	0f 90       	pop	r0
    22fe:	0f 90       	pop	r0
    2300:	0f 90       	pop	r0
    2302:	cf 91       	pop	r28
    2304:	df 91       	pop	r29
    2306:	08 95       	ret

00002308 <UART_Read>:

/*receive a character through UART*/
u8 UART_Read()
{
    2308:	df 93       	push	r29
    230a:	cf 93       	push	r28
    230c:	00 d0       	rcall	.+0      	; 0x230e <UART_Read+0x6>
    230e:	cd b7       	in	r28, 0x3d	; 61
    2310:	de b7       	in	r29, 0x3e	; 62
	u8 data;
	while(!GET_BIT(UCSRA, RXC));
    2312:	eb e2       	ldi	r30, 0x2B	; 43
    2314:	f0 e0       	ldi	r31, 0x00	; 0
    2316:	80 81       	ld	r24, Z
	data = UDR;
    2318:	ec e2       	ldi	r30, 0x2C	; 44
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	80 81       	ld	r24, Z
    231e:	89 83       	std	Y+1, r24	; 0x01
	return data;
    2320:	89 81       	ldd	r24, Y+1	; 0x01
}
    2322:	0f 90       	pop	r0
    2324:	0f 90       	pop	r0
    2326:	cf 91       	pop	r28
    2328:	df 91       	pop	r29
    232a:	08 95       	ret

0000232c <main>:
 *  Created on: Sep 29, 2019
 *      Author: MahmoudGamal
 */

int main()
{
    232c:	df 93       	push	r29
    232e:	cf 93       	push	r28
    2330:	cd b7       	in	r28, 0x3d	; 61
    2332:	de b7       	in	r29, 0x3e	; 62
    2334:	80 e0       	ldi	r24, 0x00	; 0
    2336:	90 e0       	ldi	r25, 0x00	; 0
	
}
    2338:	cf 91       	pop	r28
    233a:	df 91       	pop	r29
    233c:	08 95       	ret

0000233e <__prologue_saves__>:
    233e:	2f 92       	push	r2
    2340:	3f 92       	push	r3
    2342:	4f 92       	push	r4
    2344:	5f 92       	push	r5
    2346:	6f 92       	push	r6
    2348:	7f 92       	push	r7
    234a:	8f 92       	push	r8
    234c:	9f 92       	push	r9
    234e:	af 92       	push	r10
    2350:	bf 92       	push	r11
    2352:	cf 92       	push	r12
    2354:	df 92       	push	r13
    2356:	ef 92       	push	r14
    2358:	ff 92       	push	r15
    235a:	0f 93       	push	r16
    235c:	1f 93       	push	r17
    235e:	cf 93       	push	r28
    2360:	df 93       	push	r29
    2362:	cd b7       	in	r28, 0x3d	; 61
    2364:	de b7       	in	r29, 0x3e	; 62
    2366:	ca 1b       	sub	r28, r26
    2368:	db 0b       	sbc	r29, r27
    236a:	0f b6       	in	r0, 0x3f	; 63
    236c:	f8 94       	cli
    236e:	de bf       	out	0x3e, r29	; 62
    2370:	0f be       	out	0x3f, r0	; 63
    2372:	cd bf       	out	0x3d, r28	; 61
    2374:	09 94       	ijmp

00002376 <__epilogue_restores__>:
    2376:	2a 88       	ldd	r2, Y+18	; 0x12
    2378:	39 88       	ldd	r3, Y+17	; 0x11
    237a:	48 88       	ldd	r4, Y+16	; 0x10
    237c:	5f 84       	ldd	r5, Y+15	; 0x0f
    237e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2380:	7d 84       	ldd	r7, Y+13	; 0x0d
    2382:	8c 84       	ldd	r8, Y+12	; 0x0c
    2384:	9b 84       	ldd	r9, Y+11	; 0x0b
    2386:	aa 84       	ldd	r10, Y+10	; 0x0a
    2388:	b9 84       	ldd	r11, Y+9	; 0x09
    238a:	c8 84       	ldd	r12, Y+8	; 0x08
    238c:	df 80       	ldd	r13, Y+7	; 0x07
    238e:	ee 80       	ldd	r14, Y+6	; 0x06
    2390:	fd 80       	ldd	r15, Y+5	; 0x05
    2392:	0c 81       	ldd	r16, Y+4	; 0x04
    2394:	1b 81       	ldd	r17, Y+3	; 0x03
    2396:	aa 81       	ldd	r26, Y+2	; 0x02
    2398:	b9 81       	ldd	r27, Y+1	; 0x01
    239a:	ce 0f       	add	r28, r30
    239c:	d1 1d       	adc	r29, r1
    239e:	0f b6       	in	r0, 0x3f	; 63
    23a0:	f8 94       	cli
    23a2:	de bf       	out	0x3e, r29	; 62
    23a4:	0f be       	out	0x3f, r0	; 63
    23a6:	cd bf       	out	0x3d, r28	; 61
    23a8:	ed 01       	movw	r28, r26
    23aa:	08 95       	ret

000023ac <itoa>:
    23ac:	fb 01       	movw	r30, r22
    23ae:	9f 01       	movw	r18, r30
    23b0:	e8 94       	clt
    23b2:	42 30       	cpi	r20, 0x02	; 2
    23b4:	c4 f0       	brlt	.+48     	; 0x23e6 <itoa+0x3a>
    23b6:	45 32       	cpi	r20, 0x25	; 37
    23b8:	b4 f4       	brge	.+44     	; 0x23e6 <itoa+0x3a>
    23ba:	4a 30       	cpi	r20, 0x0A	; 10
    23bc:	29 f4       	brne	.+10     	; 0x23c8 <itoa+0x1c>
    23be:	97 fb       	bst	r25, 7
    23c0:	1e f4       	brtc	.+6      	; 0x23c8 <itoa+0x1c>
    23c2:	90 95       	com	r25
    23c4:	81 95       	neg	r24
    23c6:	9f 4f       	sbci	r25, 0xFF	; 255
    23c8:	64 2f       	mov	r22, r20
    23ca:	77 27       	eor	r23, r23
    23cc:	0e 94 07 12 	call	0x240e	; 0x240e <__udivmodhi4>
    23d0:	80 5d       	subi	r24, 0xD0	; 208
    23d2:	8a 33       	cpi	r24, 0x3A	; 58
    23d4:	0c f0       	brlt	.+2      	; 0x23d8 <itoa+0x2c>
    23d6:	89 5d       	subi	r24, 0xD9	; 217
    23d8:	81 93       	st	Z+, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	00 97       	sbiw	r24, 0x00	; 0
    23de:	a1 f7       	brne	.-24     	; 0x23c8 <itoa+0x1c>
    23e0:	16 f4       	brtc	.+4      	; 0x23e6 <itoa+0x3a>
    23e2:	5d e2       	ldi	r21, 0x2D	; 45
    23e4:	51 93       	st	Z+, r21
    23e6:	10 82       	st	Z, r1
    23e8:	c9 01       	movw	r24, r18
    23ea:	0c 94 f7 11 	jmp	0x23ee	; 0x23ee <strrev>

000023ee <strrev>:
    23ee:	dc 01       	movw	r26, r24
    23f0:	fc 01       	movw	r30, r24
    23f2:	67 2f       	mov	r22, r23
    23f4:	71 91       	ld	r23, Z+
    23f6:	77 23       	and	r23, r23
    23f8:	e1 f7       	brne	.-8      	; 0x23f2 <strrev+0x4>
    23fa:	32 97       	sbiw	r30, 0x02	; 2
    23fc:	04 c0       	rjmp	.+8      	; 0x2406 <strrev+0x18>
    23fe:	7c 91       	ld	r23, X
    2400:	6d 93       	st	X+, r22
    2402:	70 83       	st	Z, r23
    2404:	62 91       	ld	r22, -Z
    2406:	ae 17       	cp	r26, r30
    2408:	bf 07       	cpc	r27, r31
    240a:	c8 f3       	brcs	.-14     	; 0x23fe <strrev+0x10>
    240c:	08 95       	ret

0000240e <__udivmodhi4>:
    240e:	aa 1b       	sub	r26, r26
    2410:	bb 1b       	sub	r27, r27
    2412:	51 e1       	ldi	r21, 0x11	; 17
    2414:	07 c0       	rjmp	.+14     	; 0x2424 <__udivmodhi4_ep>

00002416 <__udivmodhi4_loop>:
    2416:	aa 1f       	adc	r26, r26
    2418:	bb 1f       	adc	r27, r27
    241a:	a6 17       	cp	r26, r22
    241c:	b7 07       	cpc	r27, r23
    241e:	10 f0       	brcs	.+4      	; 0x2424 <__udivmodhi4_ep>
    2420:	a6 1b       	sub	r26, r22
    2422:	b7 0b       	sbc	r27, r23

00002424 <__udivmodhi4_ep>:
    2424:	88 1f       	adc	r24, r24
    2426:	99 1f       	adc	r25, r25
    2428:	5a 95       	dec	r21
    242a:	a9 f7       	brne	.-22     	; 0x2416 <__udivmodhi4_loop>
    242c:	80 95       	com	r24
    242e:	90 95       	com	r25
    2430:	bc 01       	movw	r22, r24
    2432:	cd 01       	movw	r24, r26
    2434:	08 95       	ret

00002436 <_exit>:
    2436:	f8 94       	cli

00002438 <__stop_program>:
    2438:	ff cf       	rjmp	.-2      	; 0x2438 <__stop_program>
